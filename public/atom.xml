<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈年风楼 | 博客</title>
  
  <subtitle>当你看到了一座山，一定会想再看看山的后面是什么！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangjiaheng.cn/"/>
  <updated>2023-04-13T17:24:50.065Z</updated>
  <id>http://zhangjiaheng.cn/</id>
  
  <author>
    <name>陈年风楼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最后一篇这个站点的博客，写点什么好？</title>
    <link href="http://zhangjiaheng.cn/blog/20230412/%E6%9C%80%E5%90%8E%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%EF%BC%8C%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88%E5%A5%BD%EF%BC%9F/"/>
    <id>http://zhangjiaheng.cn/blog/20230412/最后一篇博客，写点什么好？/</id>
    <published>2023-04-12T07:13:19.000Z</published>
    <updated>2023-04-13T17:24:50.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在那么快就过去的五年以后"><a href="#在那么快就过去的五年以后" class="headerlink" title="在那么快就过去的五年以后"></a>在那么快就过去的五年以后</h1><p>时光荏苒，光阴似箭！<br>如果让我现在去知乎上提一个问题，这个问题也许可以是：「从一个无知无畏的少年，变成如今依然无知无畏的青年，是一种怎么样的体验？」</p><h3 id="谢邀！人在曼谷，已呆两周！"><a href="#谢邀！人在曼谷，已呆两周！" class="headerlink" title="谢邀！人在曼谷，已呆两周！"></a>谢邀！人在曼谷，已呆两周！</h3><center><br><iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d4012.5230951073904!2d100.56702346838435!3d13.728016552600948!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x30e29ee677aa7f5b%3A0xe706fe55596a3f50!2sOakwood%20Residence%20Sukhumvit%2024%20Bangkok!5e0!3m2!1sen!2sth!4v1681283989389!5m2!1sen!2sth" width="600" height="450" style="border:0;" allowfullscreen loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe><br></center><p>如上，Oakwood，我目前居住的位置，是公司提供给中国Office员工过来工作期间的酒店。我要从现在开始开启在曼谷的码农生涯，也许一年，也许两年，在这个充满活力与噪音的城市，等待着即将到来的种种冒险。<br><a id="more"></a></p><h3 id="那些在杭州的回忆"><a href="#那些在杭州的回忆" class="headerlink" title="那些在杭州的回忆"></a>那些在杭州的回忆</h3><p>时间回溯到四年之前(2019)，晚上十点，我坐在杭州市余杭区五常街道的一个写字楼里，盯着电脑发呆，在想自己已经多久没有见过下午的夕阳了。在这个充满奋斗与福报的城市，6点下班对于普通的打工人来说好像是一件很奢侈的事情。在这里，大部分”互联网公司”都有一些统一的福利 —— 晚饭的餐补，以及每天早上晚点来，下午晚点走的”人性化制度”。可是这些看似人性化的制度，对于我来说就好像是刑罚一般！我感觉到这种”福利”在蚕食着我去了解这美丽星球的动力，在消磨我下班之后享受生活的念想。虽然在这个城市，我可以获取到行业红利带给我的丰厚报酬，但是我的皮肤好像长满尖刺，灵魂捆满荆棘，被束缚的不自由让我想用一个锤子砸碎键盘和电脑，我已经完全做好离开这里的打算！</p><p>但是又有些不舍！杭州是一个非常美的城市，「上有天堂，下有苏杭」是对这个城市最高的赞美！工作两年，我在这个城市也认识了很多很好的朋友，以及nice的同事。</p><details><br>  <summary><br>    <div style="font-weight: 500;color: darkgreen;cursor: pointer;text-decoration: underline;text-decoration-color: white;text-decoration-style: wavy;"><br>      👉 点击展开浏览我在杭州时的一些回忆<br>    </div><br>  </summary><br>  <div style="padding: 10px;"><br><br>    初到杭州时我其实是很喜欢这里的，当时（只是当时）的公司看起来也很不错(我的名牌的座右铭很中二请忽略)<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/1493550685736.jpg" alt=""><br>    公司自己建造的大楼：<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/1493550686397.jpg" alt=""><br>    一楼的休闲和咖啡区域：<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/1493550687067.jpg" alt=""><br>    当时认识了一些直到现在还关系很好的同事，我们一起去过横店，还和NPC拍了照片：<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_20170820_102909.jpg" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_20170820_101500.jpg" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_20170820_103151.jpg" alt=""><br>    还去了杭州周边很多城市，比如绍兴：<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_20171216_160256.jpg" alt=""><br>    在18年的元旦，一起去了东极岛 —— 位于中国浙江最东边的小岛：<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_20180101_073825.jpg" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_1635.JPG" alt=""><br>    18年那会儿我的发型还很非主流哈哈：<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/MTXX_20180209202125_org.jpg" alt=""><br>    18年的春天在和朋友西溪湿地踏春看到的划船的情侣：<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_20180311_143018.jpg" alt=""><br>    冬天在南浔看一场江南的雪：<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/20181230_121310.jpg" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/20181230_144020.jpg" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/20181230_145515.jpg" alt=""><br>    也去了苏州，走了走平江路，因为旺季订不到酒店竟然当了一次背包客，男女混住在主人家的客厅里：<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/20190405_212052.jpg" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/20190406_061953.jpg" alt=""><br>    19年和几个朋友一起去了台州神仙居，这是个很美的地方，虽然有些不太好的回忆（租车过程中发生了剐蹭）:<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/20190502_162319-01.jpeg" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/20190504_153633.jpg" alt=""><br>    我真的去过了好多地方，遇到了好多不同的人，看到了好多美丽的风景！<br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/飞拉达2.jpg" alt=""><br><br>  </div><br></details><p>在这样忙里偷闲的日子里，我收到了一份大学同学发来的内推邀约，可以加入一个在西安的外企。在加入之前，我就有想过如果能去一些外企或者国外工作那该多好，离开这种人卷人的氛围，让自己更着眼于生活。但是由于自己长久不使用英语，已经没有给外企投简历的勇气哈哈。刚好机会来了可不能错过，即刻收拾行囊回到了西安。英语啥的，害，学呗！</p><h3 id="回到了故乡，西安"><a href="#回到了故乡，西安" class="headerlink" title="回到了故乡，西安"></a>回到了故乡，西安</h3><p>BTW，曾经我还是一个喜欢发发vlog的小小up主，如下是我当时回到西安不久后吐槽前单位的vlog：</p><center><br><iframe src="//player.bilibili.com/player.html?aid=78519974&bvid=BV1pJ411v7hx&cid=134347139&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><br><br><br>😈<br></center><p>回到了西安，一切都是那么的熟悉，在这个新的公司，我遇到了一群对代码、对技术有卓越追求的人，也是更热爱生活的人。公司氛围也非常轻松，经常会有些活动，厨房每月也都会有Office update，会提供一些美食，让大家饱饱口福，内部培训也很多，大家每周也都会做一些内部分享，总之，一切都非常的美好！我们team还会经常一起下下馆子哈哈哈。</p><details><br>  <summary><br>    <div style="font-weight: 500;color: darkgreen;cursor: pointer;text-decoration: underline;text-decoration-color: white;text-decoration-style: wavy;"><br>      👉 点击展开我们下馆子的照片<br>    </div><br>  </summary><br><br>    <div style="padding: 10px;"><br><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_2492.JPG" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_1659.JPG" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_2373.JPG" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_3159.JPG" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_4360 2.JPG" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_4141.JPG" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_3863 2.JPG" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_9753 2.JPG" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_3567.JPG" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_3829.JPG" alt=""><br>    <img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_0228.JPG" alt=""><br><br>    </div><br></details> <p>在2021年元旦团队的小伙伴还组织了一次互相赠送小礼物的环节，在这一天我们拍摄了一次大合照，落笔于此，非常想念♥️♥️♥️♥️他们：</p><p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_4514.jpg" alt=""></p><p>其实事实上，在我回到西安之前，当时并没有打算在西安呆很久，也没有期望能够获得这么多nice的同事和朋友。我的打算竟然是，呆一段时间，顶大一年，看英语练的如何有没有出国的机会，如果没有的话再去别的一线城市找一个WLB的公司工作，因为回来后的薪资，实在是太低了！</p><p>后来我的打算，就被一场突如其来的疫情中止了。</p><h3 id="开启新的冒险"><a href="#开启新的冒险" class="headerlink" title="开启新的冒险"></a>开启新的冒险</h3><p>疫情三年，在西安工作的”舒服”的状态，让我没有了拼命奋斗卷的欲望（技术上的学习并没有停止，反而更加关注自己编程技术的成长，也有更多时间学习和研究自己喜欢的技能，但是拒绝耗费自己的时间到工作内容上去，也没有那么大的心劲想要跳槽涨薪了）。</p><p>所以平时约曾经的发小周末吃吃烧烤，偶尔和关系好的同事周末爬个山，团队时不时的一起团建一下，烦恼逐渐减少，颈椎病都好了不少。</p><p>但是有时候人就是贱，在平淡如水的日子中又想要有一些改变。在我司这种经常换项目换团队的工作模式中，我能在一个坑待了三年多，也终于有些腻了。再加上疫情貌似”结束”了，我想挪挪窝，整好公司提供去国外工作的机会。不过因为疫情导致全球经济的衰退，很多想去的国家都去不了，泰国作为我司距离中国最近的选择，我也算是毫不犹豫的登船了⛴️！</p><p>来曼谷和这里的同事见面准备去吃饭：</p><p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/95D57E1D-B752-47F7-8E4D-8BA6FD32229E.jpg" alt=""></p><p>来泰曼谷两周，对这里的很多都熟悉又好奇。熟悉的是可以看到很多中国元素，中文，讲中文的当地人，又好奇他们的生活习惯，风俗文化。在这里遇到的人都出乎意料的和善可爱，也许和他们信奉佛教文化有关吧哈哈。</p><p>趁着还没有正式开始工作（在办工作签证），逛逛曼谷，又去了普吉岛和斯米兰岛，作为一个内陆长大的孩子，看到这样的绝美海滩和海岛真是像是圆了梦了哈哈。</p><p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_1021.JPG" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_1064.JPG" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_1097.JPG" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_1164.JPG" alt=""></p><p>去了普吉岛和斯米兰岛，斯米兰的沙滩真的太美了！！！</p><p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/FullSizeRender.JPG" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_1321.JPG" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_1367.JPG" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_1419.jpg" alt=""></p><p>在宋干节这天和同事们一起去了考山路打水仗，第一次感受了”假的”泰国文化哈哈（说假的是玩笑，但是确实曼谷当地人都在这天回家了，外面都是外地人和外国人在玩）。</p><p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_1652.JPG" alt=""></p><p>OK！日子就先暂时过到这一天，不知道后面会有什么惊喜或者坎坷等着我呢！</p><h3 id="告一段落了"><a href="#告一段落了" class="headerlink" title="告一段落了"></a>告一段落了</h3><p>在曼谷的故事还在继续，但是我的故事不会继续在这里发布了。也不会再有技术文档更新。这一站bolg就此归档了。</p><p>作为一个从无知无畏的少年成长过来的依然无知无畏的青年，始终报着好奇心去探索着这个世界。期望遇到各种各样的人，体验所有值得体验的生活。生命很短，不能白来一次，在接近三十岁的年头如果就这样随大流闷头活在一个不起眼的角落，那么自己以后走不动路的时候还有什么能够拿来回忆的呢。</p><p>如果你读到这里，希望你也同时在快乐的生活着。</p><p>感谢生命中所有遇到的人！</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在那么快就过去的五年以后&quot;&gt;&lt;a href=&quot;#在那么快就过去的五年以后&quot; class=&quot;headerlink&quot; title=&quot;在那么快就过去的五年以后&quot;&gt;&lt;/a&gt;在那么快就过去的五年以后&lt;/h1&gt;&lt;p&gt;时光荏苒，光阴似箭！&lt;br&gt;如果让我现在去知乎上提一个问题，这个问题也许可以是：「从一个无知无畏的少年，变成如今依然无知无畏的青年，是一种怎么样的体验？」&lt;/p&gt;
&lt;h3 id=&quot;谢邀！人在曼谷，已呆两周！&quot;&gt;&lt;a href=&quot;#谢邀！人在曼谷，已呆两周！&quot; class=&quot;headerlink&quot; title=&quot;谢邀！人在曼谷，已呆两周！&quot;&gt;&lt;/a&gt;谢邀！人在曼谷，已呆两周！&lt;/h3&gt;&lt;center&gt;&lt;br&gt;&lt;iframe src=&quot;https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d4012.5230951073904!2d100.56702346838435!3d13.728016552600948!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x30e29ee677aa7f5b%3A0xe706fe55596a3f50!2sOakwood%20Residence%20Sukhumvit%2024%20Bangkok!5e0!3m2!1sen!2sth!4v1681283989389!5m2!1sen!2sth&quot; width=&quot;600&quot; height=&quot;450&quot; style=&quot;border:0;&quot; allowfullscreen loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer-when-downgrade&quot;&gt;&lt;/iframe&gt;&lt;br&gt;&lt;/center&gt;

&lt;p&gt;如上，Oakwood，我目前居住的位置，是公司提供给中国Office员工过来工作期间的酒店。我要从现在开始开启在曼谷的码农生涯，也许一年，也许两年，在这个充满活力与噪音的城市，等待着即将到来的种种冒险。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发日记，程序人生" scheme="http://zhangjiaheng.cn/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%EF%BC%8C%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>编写自定义的 SpringBoot Starter 实现自动装配</title>
    <link href="http://zhangjiaheng.cn/blog/20210730/Create-your-custom-spring-boot-starter/"/>
    <id>http://zhangjiaheng.cn/blog/20210730/Create-your-custom-spring-boot-starter/</id>
    <published>2021-07-30T09:47:15.000Z</published>
    <updated>2022-11-29T14:56:28.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><em>记得几年前我在刚开始接触 SpringBoot/SpringCloud，就对SpringBoot 如何实现自动装配产生了很大的好奇。但是当时技术能力尚浅，没能对这一方面了解的很透彻，只是在想如果有朝一日我也能写一个 Starter 提供给别人用就好了。最近我准备写一个 Starter。所以这篇博客就来总结一下，什么是 SpringBoot 自动装配以及如何实现自己的 Starter。</em></p><a id="more"></a><h2 id="什么是-Spring-Boot-的-AutoConfiguration"><a href="#什么是-Spring-Boot-的-AutoConfiguration" class="headerlink" title="什么是 Spring Boot 的 AutoConfiguration"></a>什么是 <strong>Spring Boot 的 AutoConfiguration</strong></h2><h4 id="什么是-SpringBoot-的自动装配"><a href="#什么是-SpringBoot-的自动装配" class="headerlink" title="什么是 SpringBoot 的自动装配"></a>什么是 SpringBoot 的自动装配</h4><p>实际上是类似于 SPI(Java Service Provider Interface) 机制， SpringBoot 在启动的时候会扫描 <code>classpath</code>下面的这个文件 <code>META-INF/spring.factories</code>， 包括所有依赖中的该文件都能够被 SpringBoot 扫描到。然后将文件中配置的类加载到 Spring 容器中，并执行类中定义的操作，比如按需创建更多的 Bean。如下，这是<code>spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories</code> <a href="https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories#L25" target="_blank" rel="noopener">🔗</a>中的片段：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration</span></span><br></pre></td></tr></table></figure><p>该文件中，key 为<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>, value 为<code>org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration</code>。 SpringBoot 会去扫描该文件并加载RabbitAutoConfiguration 。这就是 SpringBoot 的自动装配机制。</p><p>想要更加深入了解<code>EnableAutoConfiguration</code>是如何工作的、如何读取加载<code>spring.factories</code>，请查看其源码，这里不再详述。</p><h4 id="如何实现按需加载"><a href="#如何实现按需加载" class="headerlink" title="如何实现按需加载"></a>如何实现按需加载</h4><p>用<code>RabbitAutoConfiguration</code>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; RabbitTemplate.class, Channel.class &#125;)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(RabbitProperties.class)</span><br><span class="line"><span class="meta">@Import</span>(RabbitAnnotationDrivenConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitAutoConfiguration</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p><code>@ConditionalOnClass</code>注解标记了，当加载了<code>RabbitTemplate.class, Channel.class</code>的时候（也就是说当你的 SpringBoot 项目中引入了 Rabbit 的依赖的时候），才去创建该 bean/configuration<code>RabbitAutoConfiguration。</code></p><p>在 SpringBoot 中，有很多<a href="https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition" target="_blank" rel="noopener">类似的注解</a>，可以实现条件加载 bean 的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span></span><br><span class="line"><span class="meta">@ConditionalOnCloudPlatform</span></span><br><span class="line"><span class="meta">@ConditionalOnExpression</span></span><br><span class="line"><span class="meta">@ConditionalOnJava</span></span><br><span class="line"><span class="meta">@ConditionalOnJndi</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingClass</span></span><br><span class="line"><span class="meta">@ConditionalOnNotWebApplication</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span></span><br><span class="line"><span class="meta">@ConditionalOnResource</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate</span></span><br><span class="line"><span class="meta">@ConditionalOnWarDeployment</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br></pre></td></tr></table></figure><h2 id="实现自己的-SpringBoot-Starter"><a href="#实现自己的-SpringBoot-Starter" class="headerlink" title="实现自己的 SpringBoot Starter"></a>实现自己的 SpringBoot Starter</h2><p><em>现在我们了解了SpringBoot 的自动装配和按需加载，已经可以开始尝试写一个自定义的 starter 了。</em></p><h4 id="首先使用gradle创建一个SpringBoot-项目，引入依赖"><a href="#首先使用gradle创建一个SpringBoot-项目，引入依赖" class="headerlink" title="首先使用gradle创建一个SpringBoot 项目，引入依赖"></a>首先使用gradle创建一个SpringBoot 项目，引入依赖</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter:2.5.3'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-starter-web:2.5.3'</span></span><br><span class="line">  implementation <span class="string">'org.springframework.boot:spring-boot-autoconfigure:2.5.3'</span></span><br><span class="line"></span><br><span class="line">  implementation <span class="string">'net.logstash.logback:logstash-logback-encoder:6.+'</span></span><br><span class="line"></span><br><span class="line">  testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-api:5.5.2'</span></span><br><span class="line">  testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-engine:5.5.2'</span></span><br><span class="line">  testImplementation(<span class="string">'org.springframework.boot:spring-boot-starter-test:2.5.3'</span>)</span><br><span class="line"></span><br><span class="line">  annotationProcessor <span class="string">"org.springframework.boot:spring-boot-configuration-processor:2.5.3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>annotationProcessor &#39;org.springframework.boot:spring-boot-configuration-processor:2.5.3&#39;</code> 可以生成你自定义的 Properties 的 Metadata，这样你就可以在引入这个自定义 starter 之后，在<code>application.properties</code>中像写其他配置一样写自己的自定义配置。参考<a href="[Spring Boot Reference Guide](https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#configuration-metadata-annotation-processor">这里</a>)。<a href="https://github.com/Fatezhang/Barrier/blob/master/build.gradle" target="_blank" rel="noopener">源码查看</a>。</p><h4 id="编写一个spring-factories文件"><a href="#编写一个spring-factories文件" class="headerlink" title="编写一个spring.factories文件"></a>编写一个<code>spring.factories</code>文件</h4><p>在自己的 starter 中编写文件 <code>src/main/resources/META-INF/spring.factories</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.barrier.configuration.BarrierAutoConfiguration</span><br></pre></td></tr></table></figure><p>上面的代码声明了，在 SpringBoot 加载的时候，加载自定义自动配置类<code>BarrierAutoConfiguration</code>。</p><p><code>BarrierAutoConfiguration</code> 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(Marker.class)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;BarrierProperties.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarrierAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>@ConditionalOnBean(Marker.class)</code> 标记了这个 configuration 只有在 bean <code>Marker</code> 存在的时候才被加载到 Spring Context 中。那么 Marker 类是什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableBarrierMarkerConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Marker <span class="title">barrierMarker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Marker();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Marker</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Marker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            log.info(<span class="string">"BarrierAutoConfiguration: enableBarrierMarkerBean creating..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Marker 类是一个标记类，在<code>EnableBarrierMarkerConfiguration</code>中被创建出来，加入到 SpringContext 中去的。那么何时这个 configuration 才会被加载呢？或者说我们如何控制该 configuration 被加载？</p><h4 id="创建一个注解实现按需开启-starter"><a href="#创建一个注解实现按需开启-starter" class="headerlink" title="创建一个注解实现按需开启 starter"></a>创建一个注解实现按需开启 starter</h4><p>Spring 提供了一个注解 <code>@Import</code>，可以提供使用者动态的去加载指定的 bean，尤其是去加载 configuration。</p><p>首先你要了解一个前提，SpringBoot 或者 Spring 是无法加载一个外部依赖中的 bean 的。所以我们在自己的 SpringBoot 项目中使用这个 starter 中，在SpringBoot 启动类中这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import</span>(EnableBarrierMarkerConfiguration.class)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们在自己的项目中就能够注入 Marker 这个 bean 了，也就间接地开启了<code>BarrierAutoConfiguration</code>。</p><p>但是这样写不够优雅，我们可以创建一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;EnableBarrierMarkerConfiguration.class&#125;)</span><br><span class="line">  <span class="keyword">public</span> <span class="meta">@interface</span> EnableBarrier &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在注解中使用<code>@Import</code>，导入这个 configuration。 </p><h4 id="在-SpringBoot-项目中使用"><a href="#在-SpringBoot-项目中使用" class="headerlink" title="在 SpringBoot 项目中使用"></a>在 SpringBoot 项目中使用</h4><p>这样，在 SpringBoot 项目中，引入我们自定义的 starter 之后，使用<code>@EnableBarrier</code>就能开启我们自己的 starter 的功能了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBarrier</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>最后，自定义 starter 的源码可以看<a href="https://github.com/Fatezhang/Barrier" target="_blank" rel="noopener">这里</a>。</strong></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;em&gt;记得几年前我在刚开始接触 SpringBoot/SpringCloud，就对SpringBoot 如何实现自动装配产生了很大的好奇。但是当时技术能力尚浅，没能对这一方面了解的很透彻，只是在想如果有朝一日我也能写一个 Starter 提供给别人用就好了。最近我准备写一个 Starter。所以这篇博客就来总结一下，什么是 SpringBoot 自动装配以及如何实现自己的 Starter。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://zhangjiaheng.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://zhangjiaheng.cn/tags/SpringBoot/"/>
    
      <category term="SpringBoot starter" scheme="http://zhangjiaheng.cn/tags/SpringBoot-starter/"/>
    
  </entry>
  
  <entry>
    <title>我的无奈的来源，正是他</title>
    <link href="http://zhangjiaheng.cn/blog/20210726/%E6%88%91%E7%9A%84%E6%97%A0%E5%A5%88%E7%9A%84%E6%9D%A5%E6%BA%90%EF%BC%8C%E6%AD%A3%E6%98%AF%E4%BB%96/"/>
    <id>http://zhangjiaheng.cn/blog/20210726/我的无奈的来源，正是他/</id>
    <published>2021-07-26T13:06:19.000Z</published>
    <updated>2022-11-29T14:56:28.853Z</updated>
    
    <content type="html"><![CDATA[<p>多年以前，我遇到了这么一个人。在长期的相处于磨合中，我渐渐的了解他，又渐渐的开始厌恶他。</p><p>在我看来他存在懒惰、不上进等诸多问题。我厌恶他的没有担当，面对一切事物只会去逃避。</p><p>我厌恶他做事情犹豫不决，不愿意向自己渴望的东西迈出脚步，痴望着上天能够怜悯他，将他喜欢的事物和人送到他手中。</p><p>性格上的懦弱、怯惧，以至于平平挫折，却自视为被生活沉重打击。</p><p>他把年华用以虚度的拙劣手段，对于青春与未来的人生所持有消极的态度，也曾令我屡屡失望、但同时我也是怜悯他的，我经历过他不被重视时的落寞，不被需要时的孤独，这种体验很糟糕，清楚的提醒着我，他正在难过。</p><p>他很脆弱，对于旁人的冷笑和嘲讽极度敏感。</p><p>我来到这个世界并无多么重大的意义，生活赋予我的第一要务就是要照顾好他。</p><p>于是我必须细心的感知他的大脑波动，替他整理悲苦、负面的情绪害怕他迷失，害怕他放弃只能一遍又一遍的安慰，一遍又一遍的强调。</p><p>在明知无望的情况下，还是想他能够逐渐的快乐起来。</p><p>但是我好无奈。</p><p>我无奈的来源于：我正是他。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多年以前，我遇到了这么一个人。在长期的相处于磨合中，我渐渐的了解他，又渐渐的开始厌恶他。&lt;/p&gt;
&lt;p&gt;在我看来他存在懒惰、不上进等诸多问题。我厌恶他的没有担当，面对一切事物只会去逃避。&lt;/p&gt;
&lt;p&gt;我厌恶他做事情犹豫不决，不愿意向自己渴望的东西迈出脚步，痴望着上天能够怜
      
    
    </summary>
    
      <category term="随笔" scheme="http://zhangjiaheng.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://zhangjiaheng.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>写博客有什么用？</title>
    <link href="http://zhangjiaheng.cn/blog/20210721/%E5%86%99%E5%8D%9A%E5%AE%A2%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F/"/>
    <id>http://zhangjiaheng.cn/blog/20210721/写博客有什么用？/</id>
    <published>2021-07-21T16:11:21.000Z</published>
    <updated>2022-11-29T14:56:28.824Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写过一篇正经的技术博客了，也好久没有静下心来敲几行工作之外的代码了。</p><p>今天打开自己的博客看了一眼，突然有些反胃！😫我好像对自己的博客审美疲劳了。</p><p>产生的影响就是自己越来越不想写博客，没有整理笔记的欲望了。但是看了几个朋友分享的一些不错主题的他人博客，觉得也许换一种博客主题可能写博客的热情会高一点。</p><p>但是一想到换个主题，自己又要再新主题上魔改无数，又头大了。谢特！我真纠结。</p><p>说到写博客，突然想问自己一句，写了有人看吗？真的有人会看别人的博客吗？</p><p>或者换个问题，写了是给自己看的还是希望分享给别人？其实整理笔记、写博客都是巩固自己学习内容的方式吧，想要 develop others，属实想多了。</p><p>最近逛技术论坛，例如掘金，得到一个结论：当前国内互联网公司压榨下的搬砖码农，根本没时间好好看看别人写的东西，看了也不会思考。看完别人写的博客，在博客底下评论一句：“学到了”、“收藏了”。没有一个人站出来讨论一下，更不用说指出博客中的错误了。好像大家都一起进入了一个夸夸群。</p><p>我觉得对于我来说，没有经过自己验证的理论，我是永远持怀疑态度的。我永远都不会直接接受别人的想法，也许嘴上同意，心里也不会这样想！我甚至很反感那些莫名其妙就想要强加给你一个自己觉得对的理论的人，没有说服我的理由，只会让我更加讨厌。</p><p>一想到在网络上或者生活中看到别人很轻易地就能对别人说的东西去附和，我就觉得这个世界不适合我。每个人都活的太虚伪。</p><p>你要是说什么就是什么，那我的存在岂不是很没有意义？</p><a id="more"></a><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没写过一篇正经的技术博客了，也好久没有静下心来敲几行工作之外的代码了。&lt;/p&gt;
&lt;p&gt;今天打开自己的博客看了一眼，突然有些反胃！😫我好像对自己的博客审美疲劳了。&lt;/p&gt;
&lt;p&gt;产生的影响就是自己越来越不想写博客，没有整理笔记的欲望了。但是看了几个朋友分享的一些不错主题的他人博客，觉得也许换一种博客主题可能写博客的热情会高一点。&lt;/p&gt;
&lt;p&gt;但是一想到换个主题，自己又要再新主题上魔改无数，又头大了。谢特！我真纠结。&lt;/p&gt;
&lt;p&gt;说到写博客，突然想问自己一句，写了有人看吗？真的有人会看别人的博客吗？&lt;/p&gt;
&lt;p&gt;或者换个问题，写了是给自己看的还是希望分享给别人？其实整理笔记、写博客都是巩固自己学习内容的方式吧，想要 develop others，属实想多了。&lt;/p&gt;
&lt;p&gt;最近逛技术论坛，例如掘金，得到一个结论：当前国内互联网公司压榨下的搬砖码农，根本没时间好好看看别人写的东西，看了也不会思考。看完别人写的博客，在博客底下评论一句：“学到了”、“收藏了”。没有一个人站出来讨论一下，更不用说指出博客中的错误了。好像大家都一起进入了一个夸夸群。&lt;/p&gt;
&lt;p&gt;我觉得对于我来说，没有经过自己验证的理论，我是永远持怀疑态度的。我永远都不会直接接受别人的想法，也许嘴上同意，心里也不会这样想！我甚至很反感那些莫名其妙就想要强加给你一个自己觉得对的理论的人，没有说服我的理由，只会让我更加讨厌。&lt;/p&gt;
&lt;p&gt;一想到在网络上或者生活中看到别人很轻易地就能对别人说的东西去附和，我就觉得这个世界不适合我。每个人都活的太虚伪。&lt;/p&gt;
&lt;p&gt;你要是说什么就是什么，那我的存在岂不是很没有意义？&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://zhangjiaheng.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://zhangjiaheng.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>为什么并不是所有人都有自由意志？</title>
    <link href="http://zhangjiaheng.cn/blog/20210620/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B9%B6%E4%B8%8D%E6%98%AF%E6%89%80%E6%9C%89%E4%BA%BA%E9%83%BD%E6%9C%89%E8%87%AA%E7%94%B1%E6%84%8F%E5%BF%97%EF%BC%9F/"/>
    <id>http://zhangjiaheng.cn/blog/20210620/为什么并不是所有人都有自由意志？/</id>
    <published>2021-06-20T07:41:15.000Z</published>
    <updated>2022-11-29T14:56:28.814Z</updated>
    
    <content type="html"><![CDATA[<div style="width: 100%"><br>  <iframe src="//player.bilibili.com/player.html?aid=461048579&bvid=BV1Z5411M7hG&cid=351951244&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="350px"> </iframe><br></div><center> <p style="font-size: 11px; color: gray"><u>Loki - About free will</u></p> </center><p>这两天看了一个新的美剧——《Loki》。是漫威系列的多元宇宙时间线背景的科幻加奇幻片。一开始是抱着看爆米花剧的心态再加上自己一直以来都对漫威的电影很感兴趣，所以翻墙找了资源🤫。剧情虽然离谱但是很对我的胃口，故事大致讲的是在复仇者联盟穿越回 2012 年寻找宇宙魔方（空间宝石）的时候，Loki 偷走了空间宝石。而因为扰乱了漫威宇宙的神圣时间线，被时间管理局逮捕。</p><a id="more"></a><p>剧中的时间管理局的工作者可以说是三位神圣的时间守护者创造出来管理时间线的没有生命的机器人。他们无法自由的出现在神圣时间线中，也就是无法干涉现实的人类生活，否则会扰乱神圣时间线从而导致出现时间线分支，衍生出多元宇宙。只能够待在时间管理局这样一个超脱时间存在的地方，日复一日的工作。</p><p>而 Loki，阿斯加德的诡计之神，一个不会听命于所有人，想要统治整个宇宙，自己建立规则的自由的神，在剧中与这位时间管理局的分析师——莫比乌斯，有了一段上述视频中的对话。只是一段小的插曲，却让我反复看了好几遍。</p><p>莫比乌斯收藏了一份摩托艇杂志，和洛基谈起来的时候神采飞扬像是非常了解摩托艇并极其热爱，但是当洛基问他有没有坐过的时候他的答案却是“no”。时间管理局的人没有权利去享受现实世界的任何事物，因为会引出另一个时间分支。他每天都看摩托艇杂志只是为了提醒自己为什么活着，为何而战！他不去想有什么意义，只是去一味的遵守既定设定。这让洛基对此非常不解。他反问洛基是被谁创造出来的，并说不论是谁，都没有意义，而且<code>Exist is chaos.</code>存在即混乱。当我们试着去理解这一切的时候，它们都会变得毫无意义！所以他相信这一切都是真的，并且按照这个设定去完成自己的“光荣使命”。</p><p>但是作为诡计之神的洛基，却不愿意遵守规则。他觉得这种过去、现在、将来被设定好的一切都是不正确的，时间就应该拥有不确定性，每个人也都是自由的，都拥有自由意志，能够按照记得的想法去做自己想做的事情。以至于那三个神圣的时间守护者，洛基有句话可能也有暗示：“There no one bad is truly bad, and no one good is ever truly good”。如果相信并且遵循固定的一切，那么自由意志将不复存在。</p><p>关于所谓的自由意志，我想每个人都用于不同的认识。我所理解的自由意志，是指<u>每个人都对自己的行为的产生，拥有自主决定性。不光指行动上的行为，还有思考，而且主要是指思考。每个人都是自己行为的主人，不受任何外界因素的影响</u>，这才叫拥有自由意志。</p><p>然而，现实世界有多少人拥有自由意志呢？每个人的成长过程中，都在经受着社会环境影响，每个人都拥有不同的人格，环境中一丁点的差别都会造就出两个完全不同的人。也许两个人在同一时间点读了不同的书，下一回就是几年后二者战场上兵戎相见、各为其主。</p><p>自由意志早已被那些所谓“爱你的人”、“管理你的人”、“你爱的人”、“你为之效忠的***”淹没在无底深渊。当你的自由意志想要反抗着挣扎着出来的时候，上述那些就像拥有着魔法一样将之再次压制回去。</p><p>不过其实自由意志也不需要完全的反抗，你只需要懂得辩证的思考。在你接受一个观点的时候，站在这个观点的对立面去思考问题，从多个角度看待一件事物的影响，尽可能的减少外界带给你的一些“判断依据”，那么自由意志就会产生，你才会自主的决定自己的行为，和对一件事物的思考。</p><p>其实我发现自己身边的人，并不懂得辩证的思考问题，在一个网站看到一个帖子，觉得说的正确，就急于将之分享给别人，变成自己的想法滔滔不绝的灌输给别人，完全缺乏多角度的思考。</p><p>不过有时候多角度思考问题，轻则形成一个犹豫不决的人格，或者让你很难去接受别人的想法，严重更会容易导致人格分裂，我感觉的的心里就住了两个自己，每次做出选择的时候脑子里就会有另一个声音发出反对意见，我是不是要去看一下心理医生… …</p><p>最后凭借着这个话题，想到一个最近看到的一句话：如果循规蹈矩的生活并没有给你带来预期的幸福，反而让你在神采飞扬的大好年华过的卑微而苍白，那么就试着放飞自我，随心所欲一次！</p><p><strong>自由、自由意志万岁！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/IMG_5839.JPG" alt="IMG_5839"></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;width: 100%&quot;&gt;&lt;br&gt;  &lt;iframe src=&quot;//player.bilibili.com/player.html?aid=461048579&amp;bvid=BV1Z5411M7hG&amp;cid=351951244&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; width=&quot;100%&quot; height=&quot;350px&quot;&gt; &lt;/iframe&gt;&lt;br&gt;&lt;/div&gt;

&lt;center&gt; &lt;p style=&quot;font-size: 11px; color: gray&quot;&gt;&lt;u&gt;Loki - About free will&lt;/u&gt;&lt;/p&gt; &lt;/center&gt;



&lt;p&gt;这两天看了一个新的美剧——《Loki》。是漫威系列的多元宇宙时间线背景的科幻加奇幻片。一开始是抱着看爆米花剧的心态再加上自己一直以来都对漫威的电影很感兴趣，所以翻墙找了资源🤫。剧情虽然离谱但是很对我的胃口，故事大致讲的是在复仇者联盟穿越回 2012 年寻找宇宙魔方（空间宝石）的时候，Loki 偷走了空间宝石。而因为扰乱了漫威宇宙的神圣时间线，被时间管理局逮捕。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://zhangjiaheng.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://zhangjiaheng.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>由 SpringBoot 升级到 2.4.2 引发的 Jackson 的 JsonFormat 问题排查</title>
    <link href="http://zhangjiaheng.cn/blog/20210120/spring-boot-to-2-4-2/"/>
    <id>http://zhangjiaheng.cn/blog/20210120/spring-boot-to-2-4-2/</id>
    <published>2021-01-20T12:37:43.000Z</published>
    <updated>2022-11-29T14:56:28.800Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/3hmYwN.jpg" alt="3hmYwN"></p><a id="more"></a><h2 id="事情是这样的"><a href="#事情是这样的" class="headerlink" title="事情是这样的"></a>事情是这样的</h2><p>在不久的以前，我们项目的 Tech Lead 决定在git repo中引入 DependaBot 来对项目中的依赖做检查并升级。我们的一个使用 SpringBoot 的服务也就这样成了待升级依赖的一份子。我们待升级的依赖包括但不限于：</p><ul><li>Bump newrelic-agent from 5.8.0 to 6.3.0 …</li><li>Bump guava from 28.0-jre to 30.1-jre …</li><li>Bump spring-hateoas from 1.1.0.RELEASE to 1.2.3 …</li><li>Bump postgresql from 42.2.8 to 42.2.18 …</li><li>Bump cloudwatch from 2.13.41 to 2.15.66 …</li><li>Bump json-schema-validator from 4.2.0 to 4.3.3 …</li><li>Bump org.springframework.boot from 2.2.5.RELEASE to 2.4.2 …</li><li>Bump io.spring.dependency-management …</li><li>Bump io.freefair.lombok from 4.1.3 to 5.3.0 …</li><li>Bump org.flywaydb.flyway from 6.1.3 to 7.5.0 …</li></ul><p>可以看到，几乎都将这些依赖升级到了最新的版本，甚至 SpringBoot2.4.2 是在这次升级的前三天 release 的。但是我们不慌，升级依赖什么的对我们来说跟喝水一样简单，因为… </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jacocoTestCoverageVerification &#123;</span><br><span class="line">  dependsOn <span class="string">'jacocoTestReport'</span></span><br><span class="line">  violationRules &#123;</span><br><span class="line">    rule &#123;</span><br><span class="line">      element = <span class="string">'CLASS'</span></span><br><span class="line">      limit &#123;</span><br><span class="line">        minimum = <span class="number">1.0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的代码的测试覆盖率的要求是惊人的100%🤣 这在我之前的公司是绝对无法实现的。不仅仅是 unit test， 我们还有 integration 测试覆盖，还有用到  cypress 又一次覆盖了所有的 endpoint。不就是改改代码么/升级依赖啥的么，随便玩。</p><h2 id="于是"><a href="#于是" class="headerlink" title="于是"></a>于是</h2><p>梭哈！👨🏻‍💻👨🏻‍💻👨🏻‍💻👨🏻‍💻👨🏻‍💻👨🏻‍💻👨🏻‍💻升级，跑测试！</p><p>几分钟后：<img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/do0JqI.png" alt="do0JqI"></p><p>行嘛，不出我所料（才怪🙃）果然挂了。</p><p>打开log一看， emmm… </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of <span class="built_in">type</span> `java.time.LocalDate` from String <span class="string">"2020-01-15"</span>: Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text <span class="string">'2020-01-15'</span> could not be parsed: Unable to obtain LocalDate from TemporalAccessor: &#123;YearOfEra=2020, MonthOfYear=1, DayOfMonth=15&#125;,ISO of <span class="built_in">type</span> java.time.format.Parsed; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of <span class="built_in">type</span> `java.time.LocalDate` from String <span class="string">"2020-01-15"</span>: Failed to deserialize java.time.LocalDate: (java.time.format.DateTimeParseException) Text <span class="string">'2020-01-15'</span> could not be parsed: Unable to obtain LocalDate from TemporalAccessor: &#123;YearOfEra=2020, MonthOfYear=1, DayOfMonth=15&#125;,ISO of <span class="built_in">type</span> java.time.format.Parsed</span><br><span class="line"> at [Source: (PushbackInputStream); line: 2, column: 18] (through reference chain: com.example.demo.Demo[<span class="string">"localDate"</span>])]</span><br></pre></td></tr></table></figure><p>汪的发！？😢 用的好好的<code>@JsonFormat</code>怎么就突然不好使了？</p><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><h4 id="打开代码看一下："><a href="#打开代码看一下：" class="headerlink" title="打开代码看一下："></a>打开代码看一下：</h4><p>我有这么一个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">(LocalDate localDate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.localDate = localDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>, lenient = OptBoolean.FALSE)</span><br><span class="line">    <span class="keyword">private</span> LocalDate localDate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getLocalDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> localDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocalDate</span><span class="params">(LocalDate localDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.localDate = localDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中配置了 localDate 的反序列化为严格模式<code>lenient = OptBoolean.FALSE</code>，防止将 number 反序列化为日期，那样是不正确的。</p><p>有这么一个 controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">test</span><span class="params">(@RequestBody Demo demo)</span> </span>&#123;</span><br><span class="line">        var localDate = demo.getLocalDate().toString();</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(localDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，就是有一个对象，接收一个 LocalDate 的属性，用pattern <code>yyyy-MM-dd</code> 接收类似于<code>2020-01-15</code>这样格式的日期。</p><p>但是之前用得好好的升级了 SpringBoot2.4.2之后却用不了了？emmmm… 一定是 SpringBoot 升级升了啥不该升的玩应，🧐我要去 SpringBoot 的升级日志里看看，是不是升级了 Jackson 啥的，万一找到一个大霸哥🦟，提个 PR 不就从此成为顶级开源项目的 contributor 了。。。😎</p><h4 id="SpringBoot-2-4-2-升级日志"><a href="#SpringBoot-2-4-2-升级日志" class="headerlink" title="SpringBoot 2.4.2 升级日志"></a>SpringBoot 2.4.2 升级日志</h4><p>去 GitHub 上打开  <a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.4.2" target="_blank" rel="noopener">SpringBoot Release v2.4.2</a> ， 浏览下 <strong>Bug Fixes</strong> 、 <strong>Documentation</strong>、<strong>Dependency Upgrades</strong>， 发现一行：</p><blockquote><p>Upgrade to Jackson Bom 2.11.4 #24726</p></blockquote><p>果然，升级了 Jackson 到<code>2.11.4</code>。 对比了一下发现我原先的 SpringBoot 中的 Jackson 版本是<code>2.10.2</code>， emm… 一般这种稍大的版本升级都伴随着很多 magic 的事情。总之接下来要去 Jackson 的升级日志里面看一下，有什么升级跨越了<code>2.10.*</code>和<code>2.11.*</code>这两个版本。</p><h4 id="Jackson-2-11升级日志"><a href="#Jackson-2-11升级日志" class="headerlink" title="Jackson 2.11升级日志"></a>Jackson 2.11升级日志</h4><p>这个升级日志在它 GitHub 的 wiki 里，点击<a href="https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.11" target="_blank" rel="noopener">Jackson Release 2.11</a>。 </p><p>阅读一下，第一遍竟然没有找到任何线索，阿西吧🥵，通篇与<code>@JsonFormat</code>的字眼几乎没有。但是，功夫不负有心人，由于我这个错误是时间类型的转换问题，在如下所示的更改中，发现对于<code>Java 8date/time</code>有相关升级：</p><p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/xCxT2g.png" alt="xCxT2g"></p><blockquote><ul><li><a href="https://github.com/FasterXML/jackson-modules-java8/issues/148" target="_blank" rel="noopener">#148</a>: Allow strict <code>LocalDate</code> parsing</li></ul></blockquote><p>打开这个 <a href="https://github.com/FasterXML/jackson-modules-java8/issues/148" target="_blank" rel="noopener">issue</a> 看一下，如他们所讨论的，在之前配置了<code>@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;, lenient = OptBoolean.FALSE)</code>, Jackson 创建的<code>DateTimeFormatter</code>还是会使用<code>ResolverStyle.SMART</code> smart 模式，并不能阻止非法日期<code>2019-11-31</code>的输入。 所以在<code>2.11</code>版本之后， 如果设置了<code>lenient = OptBoolean.FALSE</code>, <code>DateTimeFormatter</code>会使用严格模式，看看代码：</p><p>在Jackson 中的<code>JSR310DateTimeDeserializerBase</code>这个类中，有这么一个方法<code>createContextual</code>， 有这么一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!deser.isLenient()) &#123;</span><br><span class="line">  df = df.withResolverStyle(ResolverStyle.STRICT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是，为什么<code>DateTimeFormatter</code>使用了严格模式，会导致上述报错呢？</p><h4 id="Java8-之后的-java-time-之-DateTimeFormatter"><a href="#Java8-之后的-java-time-之-DateTimeFormatter" class="headerlink" title="Java8 之后的 java.time 之 DateTimeFormatter"></a>Java8 之后的 java.time 之 DateTimeFormatter</h4><p><strong>严格模式下的字符串转LocalDate</strong></p><p><strong><em>举个🌰👀👀</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  DateTimeFormatter formatter = DateTimeFormatter</span><br><span class="line">    .ofPattern(<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    .withResolverStyle(ResolverStyle.STRICT);</span><br><span class="line"></span><br><span class="line">  LocalDate localDate = LocalDate.parse(<span class="string">"2021-01-20"</span>, formatter);</span><br><span class="line">  System.out.println(<span class="string">"localDate = "</span> + localDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行，并抛出异常，转换失败！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.time.format.DateTimeParseException: Text <span class="string">'2021-01-20'</span> could not be parsed: Unable to obtain LocalDate from TemporalAccessor: &#123;YearOfEra=2021, DayOfMonth=20, MonthOfYear=1&#125;,ISO of <span class="built_in">type</span> java.time.format.Parsed</span><br></pre></td></tr></table></figure><p>关键字<code>YearOfEra</code>？🧐啊，带年代的年？沃德发😱？</p><p>打开类<code>DateTimeFormatter</code>搜索一下<code>yyyy</code>，发现一段注释里面<code>y: year-of-era</code>：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* All letters 'A' to 'Z' and 'a' to 'z' are reserved as pattern letters. The</span><br><span class="line">* following pattern letters are defined:</span><br><span class="line">* &lt;table class="striped"&gt;</span><br><span class="line">* &lt;caption&gt;Pattern Letters and Symbols&lt;/caption&gt;</span><br><span class="line">* &lt;thead&gt;</span><br><span class="line">*  &lt;tr&gt;&lt;th scope="col"&gt;Symbol&lt;/th&gt;   &lt;th scope="col"&gt;Meaning&lt;/th&gt;         &lt;th scope="col"&gt;Presentation&lt;/th&gt; &lt;th scope="col"&gt;Examples&lt;/th&gt;</span><br><span class="line">* &lt;/thead&gt;</span><br><span class="line">* &lt;tbody&gt;</span><br><span class="line">*   &lt;tr&gt;&lt;th scope="row"&gt;G&lt;/th&gt;       &lt;td&gt;era&lt;/td&gt;                         &lt;td&gt;text&lt;/td&gt;              &lt;td&gt;AD; Anno Domini; A&lt;/td&gt;</span><br><span class="line">*   &lt;tr&gt;&lt;th scope="row"&gt;u&lt;/th&gt;       &lt;td&gt;year&lt;/td&gt;                        &lt;td&gt;year&lt;/td&gt;              &lt;td&gt;2004; 04&lt;/td&gt;</span><br><span class="line">*   &lt;tr&gt;&lt;th scope="row"&gt;y&lt;/th&gt;       &lt;td&gt;year-of-era&lt;/td&gt;                 &lt;td&gt;year&lt;/td&gt;              &lt;td&gt;2004; 04&lt;/td&gt;</span><br></pre></td></tr></table></figure><p>原来，<code>u</code>才是代表年的那个字母，而<code>y</code>是指带有纪元（era）的年，在<code>DateTimeFormatter</code>严格模式下使用，<code>yyyy-MM-dd</code>并不合法，正确的使用姿势是<code>uuuu-MM-dd</code>！！！</p><p>所以<code>yyyy</code>要怎么用呢？如下，带上<code>G</code>表示一下公元前或者公元后吧。<code>AD/BC</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter formatter = DateTimeFormatter</span><br><span class="line">  .ofPattern(<span class="string">"yyyy-MM-dd G"</span>)</span><br><span class="line">  .withResolverStyle(ResolverStyle.STRICT);</span><br><span class="line"></span><br><span class="line">LocalDate localDate = LocalDate.parse(<span class="string">"2021-01-20 AD"</span>, formatter);</span><br></pre></td></tr></table></figure><p><strong>至此，大功告成，问题解决，依赖也成功升级</strong></p><h4 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h4><p>问题解决了心情很好，但是反思一下，Java8 都出来这么久了，新的日期时间也用了很多，但是就是忽略了<code>y</code>和<code>u</code>这么不起眼的小问题！</p><p>在问题的排查中，实际上并不如上述流程这样顺利，我还在 Jackson 的 GitHub 里面提了 issue</p><p><a href="https://github.com/FasterXML/jackson-modules-java8/issues/199" target="_blank" rel="noopener">https://github.com/FasterXML/jackson-modules-java8/issues/199</a></p><p>在我排查 Jackson 的源码的时候，发现他们对于这段代码<code>df = df.withResolverStyle(ResolverStyle.STRICT);</code>的升级，并没有很完善的测试。在他们的源码中可以看到test case 都是只是测试了异常情况，并没有覆盖原先本应该正确的 case（可见 unit test 是多么的重要），他们的测试源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDateDeserTest</span> <span class="keyword">extends</span> <span class="title">ModuleTestBase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper MAPPER = newMapper();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StrictWrapper</span> </span>&#123;</span><br><span class="line">        <span class="meta">@JsonFormat</span>(pattern=<span class="string">"yyyy-MM-dd"</span>,</span><br><span class="line">                lenient = OptBoolean.FALSE)</span><br><span class="line">        <span class="keyword">public</span> LocalDate value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StrictWrapper</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StrictWrapper</span><span class="params">(LocalDate v)</span> </span>&#123; value = v; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(expected = InvalidFormatException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStrictCustomFormat</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/*StrictWrapper w =*/</span> MAPPER.readValue(<span class="string">"&#123;\"value\":\"2019-11-31\"&#125;"</span>, StrictWrapper.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个测试的问题在于，将<code>{ &quot;value&quot; : &quot;2019-11-31&quot;}</code>改成合法的也能跑过。因为严格模式下， <code>yyyy-MM-dd</code>并不合法，同样会跑出<code>InvalidFormatException</code>异常。所以我在 Jackson 的<code>jackson-modules-java8</code>这个 repo 下还提了一个 PR 去修改他们的测试用例：</p><p><a href="https://github.com/FasterXML/jackson-modules-java8/pull/201" target="_blank" rel="noopener">https://github.com/FasterXML/jackson-modules-java8/pull/201</a></p><p> 不过也只是简单覆盖一下这个 case，对于其他用到<code>yyyy</code>的测试并未做修改，希望我的 PR 能被合进去吧哈哈😜虽然只是单元测试并不是代码功能，但也很有用啊。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/3hmYwN.jpg&quot; alt=&quot;3hmYwN&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/tags/springboot/"/>
    
      <category term="DateTimeFormatter" scheme="http://zhangjiaheng.cn/tags/DateTimeFormatter/"/>
    
      <category term="jackson" scheme="http://zhangjiaheng.cn/tags/jackson/"/>
    
      <category term="lenient" scheme="http://zhangjiaheng.cn/tags/lenient/"/>
    
      <category term="JsonFormat" scheme="http://zhangjiaheng.cn/tags/JsonFormat/"/>
    
  </entry>
  
  <entry>
    <title>使用 UPic &amp; GitHub 做个自己的图床</title>
    <link href="http://zhangjiaheng.cn/blog/20210113/%E4%BD%BF%E7%94%A8-UPic-GitHub-%E5%81%9A%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E5%BA%8A/"/>
    <id>http://zhangjiaheng.cn/blog/20210113/使用-UPic-GitHub-做个自己的图床/</id>
    <published>2021-01-13T14:42:28.000Z</published>
    <updated>2022-11-29T14:56:28.818Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/spider1.jpg" alt="spider1"></p><center><br><br>有写过一个小小的创建步骤，不过是英文版的(在练习写英文博客)，有兴趣的可以点开看下，步骤也比较简单。<br><br><a href="https://chennianfenglou.github.io/#/blogs/upicGithub?id=create-your-image-service-by-upic-amp-github" target="_blank" rel="noopener">点击跳转到文章</a><br></center><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/spider1.jpg&quot; alt=&quot;spider1&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;br&gt;有写过一个小小的创建步骤，不过是英
      
    
    </summary>
    
      <category term="开发工具" scheme="http://zhangjiaheng.cn/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="http://zhangjiaheng.cn/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用Localstack 搭建 AWS 本地开发环境</title>
    <link href="http://zhangjiaheng.cn/blog/20201227/%E4%BD%BF%E7%94%A8localstack-%E6%90%AD%E5%BB%BA-AWS-%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://zhangjiaheng.cn/blog/20201227/使用localstack-搭建-AWS-本地开发环境/</id>
    <published>2020-12-27T07:45:59.000Z</published>
    <updated>2022-11-29T14:56:28.819Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/DBhQX3.jpg" alt="DBhQX3"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信有很多同学公司项目都有用到 AWS 或者有同学在学习 AWS，我们知道像 AWS 这样的云服务，我们不太能很方便的去在本地开发的时候连接云上的服务，更何况 staging/production 环境还会有安全方面的考虑。那么当我们创建好一个项目的时候，我们如何去搭建其本地开发环境方便我们在本地开发调试呢？没错！使用 localstack！</p><p><strong><a href="https://github.com/localstack/localstack" target="_blank" rel="noopener">LocalStack - A fully functional local AWS cloud stack</a></strong></p><blockquote><p><strong><em>LocalStack provides an easy-to-use test/mocking framework for developing Cloud applications.</em></strong></p><p><strong><em>Currently, the focus is primarily on supporting the AWS cloud stack.</em></strong></p></blockquote><p>LocalStack 是提供给开发者一个方便去测试和 mock 服务的框架， 目前主要提供 AWS 云服务。</p><a id="more"></a><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><h3 id="例：使用-LocalStack-创建一个-SNS服务"><a href="#例：使用-LocalStack-创建一个-SNS服务" class="headerlink" title="例：使用 LocalStack 创建一个 SNS服务"></a>例：使用 LocalStack 创建一个 SNS服务</h3><p>想像我们有这样一个 SpringBoot 服务，提供接口在用户提交一条记录的时候给用户发邮件，一般情况这种业务我们都会将保存数据库和发邮件异步执行。使用 AWS 的话，我们就可以在保存数据库之后调用 SNS 服务，发布一个 <code>Event</code> 然后等待下游邮件服务订阅对应的 topic 然后消费。</p><p>那么如何创建呢？如下在 <code>docker-compose.yml</code> 文件中加入<code>localstack</code>，SERVICES 指定好 <code>sns</code>：</p><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.7"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  localstack:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">localstack/localstack:0.12.1</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">app_net</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"4566:4566"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICES=sns</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DEFAULT_REGION=ap-southeast-2</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DEBUG=1</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./auto/create-localstack-topic:/docker-entrypoint-initaws.d/create-localstack-topic.sh</span></span><br></pre></td></tr></table></figure><h4 id="create-localstack-topic-sh"><a href="#create-localstack-topic-sh" class="headerlink" title="create-localstack-topic.sh"></a>create-localstack-topic.sh</h4><p>此外，可以看到我们还 volume 了一个脚本进去，那就是创建 SNS 的脚本。实际上这个命令就是 aws cli，在其官网就可以找得到，我们只需要把 <code>aws</code> 换成 <code>awslocal</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">REGION=<span class="variable">$&#123;DEFAULT_REGION:-ap-southeast-2&#125;</span></span><br><span class="line">TOPIC_NAME=demo-events-topic</span><br><span class="line"></span><br><span class="line">awslocal sns create-topic --name=<span class="variable">$&#123;TOPIC_NAME&#125;</span> --region <span class="string">"<span class="variable">$&#123;REGION&#125;</span>"</span></span><br></pre></td></tr></table></figure><h4 id="启动日志"><a href="#启动日志" class="headerlink" title="启动日志"></a>启动日志</h4><p>当启动 <code>docker-compose up localstack</code> 的时候，就在该容器中创建好了 SNS 服务提供给我们使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">sns_1            | Waiting <span class="keyword">for</span> all LocalStack services to be ready</span><br><span class="line">sns_1            | 2020-12-27 07:02:36,554 CRIT Supervisor is running as root.  Privileges were not dropped because no user is specified <span class="keyword">in</span> the config file.  If you intend to run as root, you can <span class="built_in">set</span> user=root <span class="keyword">in</span> the config file to avoid this message.</span><br><span class="line">sns_1            | 2020-12-27 07:02:36,559 INFO supervisord started with pid 15</span><br><span class="line">sns_1            | 2020-12-27 07:02:37,566 INFO spawned: <span class="string">'dashboard'</span> with pid 21</span><br><span class="line">sns_1            | 2020-12-27 07:02:37,571 INFO spawned: <span class="string">'infra'</span> with pid 22</span><br><span class="line">sns_1            | 2020-12-27 07:02:37,577 INFO success: dashboard entered RUNNING state, process has stayed up <span class="keyword">for</span> &gt; than 0 seconds (startsecs)</span><br><span class="line">sns_1            | 2020-12-27 07:02:37,577 INFO exited: dashboard (<span class="built_in">exit</span> status 0; expected)</span><br><span class="line">sns_1            | (. .venv/bin/activate; <span class="built_in">exec</span> bin/localstack start --host)</span><br><span class="line">sns_1            | 2020-12-27 07:02:38,591 INFO success: infra entered RUNNING state, process has stayed up <span class="keyword">for</span> &gt; than 1 seconds (startsecs)</span><br><span class="line">sns_1            | LocalStack version: 0.12.1</span><br><span class="line">sns_1            | Starting <span class="built_in">local</span> dev environment. CTRL-C to quit.</span><br><span class="line">sns_1            | 2020-12-27T07:02:39:DEBUG:bootstrap.py: Loading plugins - scope <span class="string">"services"</span>, module <span class="string">"localstack"</span>: &lt;<span class="keyword">function</span> register_localstack_plugins at 0x7f963f120f70&gt;</span><br><span class="line">sns_1            | Waiting <span class="keyword">for</span> all LocalStack services to be ready</span><br><span class="line">sns_1            | 2020-12-27T07:02:43:INFO:localstack.utils.analytics.profiler: Execution of <span class="string">"load_plugin_from_path"</span> took 4333.9550495147705ms</span><br><span class="line">sns_1            | 2020-12-27T07:02:43:INFO:localstack.utils.analytics.profiler: Execution of <span class="string">"load_plugins"</span> took 4334.24186706543ms</span><br><span class="line">sns_1            | Starting edge router (https port 4566)...</span><br><span class="line">sns_1            | Starting mock SNS service on http port 4566 ...</span><br><span class="line">sns_1            | 2020-12-27T07:02:45:INFO:localstack.utils.analytics.profiler: Execution of <span class="string">"prepare_environment"</span> took 2061.4540576934814ms</span><br><span class="line">sns_1            | 2020-12-27T07:02:45:INFO:localstack.multiserver: Starting multi API server process on port 59903</span><br><span class="line">sns_1            | [2020-12-27 07:02:45 +0000] [23] [INFO] Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">sns_1            | 2020-12-27T07:02:45:INFO:hypercorn.error: Running on https://0.0.0.0:4566 (CTRL + C to quit)</span><br><span class="line">sns_1            | [2020-12-27 07:02:45 +0000] [23] [INFO] Running on http://0.0.0.0:59903 (CTRL + C to quit)</span><br><span class="line">sns_1            | 2020-12-27T07:02:45:INFO:hypercorn.error: Running on http://0.0.0.0:59903 (CTRL + C to quit)</span><br><span class="line">sns_1            | 2020-12-27 07:02:45,824:API:  * Running on http://0.0.0.0:57589/ (Press CTRL+C to quit)</span><br><span class="line">sns_1            | Waiting <span class="keyword">for</span> all LocalStack services to be ready</span><br><span class="line">sns_1            | Ready.</span><br><span class="line">sns_1            | 2020-12-27T07:02:50:INFO:localstack.utils.analytics.profiler: Execution of <span class="string">"start_api_services"</span> took 5102.221965789795ms</span><br><span class="line">sns_1            | /usr/<span class="built_in">local</span>/bin/docker-entrypoint.sh: running /docker-entrypoint-initaws.d/create-localstack-topic.sh</span><br><span class="line">sns_1            | &#123;</span><br><span class="line">sns_1            |     <span class="string">"TopicArn"</span>: <span class="string">"arn:aws:sns:ap-southeast-2:000000000000:demo-events-topic"</span></span><br><span class="line">sns_1            | &#125;</span><br></pre></td></tr></table></figure><h4 id="在命令行调用"><a href="#在命令行调用" class="headerlink" title="在命令行调用"></a>在命令行调用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint-url=http://localhost:4566 sns publish --topic-arn arn:aws:sns:ap-southeast-2:000000000000:demo-events-topic --region ap-southeast-2 --message <span class="string">"Hello SNS"</span></span><br></pre></td></tr></table></figure><p>注意，在本地使用 aws 命令调用 localstack 中的服务的时候，需要覆盖<code>endpoint-url</code>, 否则回去拿着 credentials 调用实际环境的服务。</p><h4 id="在-SpringBoot-中使用的注意点"><a href="#在-SpringBoot-中使用的注意点" class="headerlink" title="在 SpringBoot 中使用的注意点"></a>在 SpringBoot 中使用的注意点</h4><p>在 SpringBoot 或者其他代码库（如node）中使用的话，可以根据不同的环境创建不同的 <code>SNSClient</code>， 本地环境的注意要覆盖 endpoint：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(&#123;<span class="string">"local"</span>, <span class="string">"docker"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalSnsClientConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aws.sns.endpoint&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String awsSnsEndpoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SnsClient <span class="title">snsClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        var clientBuilder = SnsClient.builder();</span><br><span class="line">        <span class="keyword">if</span> (!Strings.isNullOrEmpty(awsSnsEndpoint)) &#123;</span><br><span class="line">            clientBuilder.endpointOverride(URI.create(awsSnsEndpoint));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clientBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动多个服务"><a href="#启动多个服务" class="headerlink" title="启动多个服务"></a>启动多个服务</h3><p>上面只是一个启动 SNS 服务的例子，实际使用中，我们都会多种服务结合使用。比如会有一个 SQS 服务， 订阅了 SNS 的 topic，然后去 trigger 一个 lambda，执行相应的一些任务，那么如何在本地实现这些服务的相互订阅与触发呢？实际上只需要在一个 localstack 中启动多个服务然后执行一些脚本建立之间的关系（具体命令和 aws cli 一样）就可以了，如下：</p><h4 id="docker-compose-yml-1"><a href="#docker-compose-yml-1" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.7"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  localstack:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">localstack/localstack:0.12.1</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">localstack</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">app_net</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"4566:4566"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICES=sns,sqs,kms,cloudwatch,lambda</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DEFAULT_REGION=ap-southeast-2</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">LAMBDA_EXECUTOR=docker-reuse</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">LAMBDA_REMOTE_DOCKER=false</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">LAMBDA_DOCKER_NETWORK=host</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DEBUG=1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">HOST_TMP_FOLDER=$&#123;TMPDIR&#125;</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DOCKER_HOST=unix:///var/run/docker.sock</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">LOCAL_CODE_PATH=$&#123;PWD&#125;</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">$&#123;TMPDIR:-/tmp/localstack&#125;:/tmp/localstack</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./auto/create-localstack:/docker-entrypoint-initaws.d/create-localstack.sh</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./kms/kms_seed.yaml:/init/seed.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  app_net:</span></span><br></pre></td></tr></table></figure><h4 id="kms-seed-yaml"><a href="#kms-seed-yaml" class="headerlink" title="kms_seed.yaml"></a>kms_seed.yaml</h4><p>我在这里启动了 sns,sqs,kms,cloudwatch,lambda。 比较值得一说的除了在本地访问 sqs, sns, kms 等需要覆盖掉 <code>endpoint-url</code>之外， 在本地使用 kms 还需要指定一个 <code>seed.yml</code> 来用它进行加解密。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Keys:</span></span><br><span class="line"><span class="attr">  Symmetric:</span></span><br><span class="line"><span class="attr">    Aes:</span></span><br><span class="line"><span class="attr">      - Metadata:</span></span><br><span class="line"><span class="attr">          KeyId:</span> <span class="number">832</span><span class="string">ac356-3c82-4c4d-a3dc-7489da152197</span></span><br><span class="line"><span class="attr">        BackingKeys:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="number">2</span><span class="string">bdaead27fe7da2de47945d34cd6d79e36494e73802f3cd3869f1d2cb0b5d74c</span></span><br><span class="line"><span class="attr">Aliases:</span></span><br><span class="line"><span class="attr">  - AliasName:</span> <span class="string">alias/testing</span></span><br><span class="line"><span class="attr">    TargetKeyId:</span> <span class="number">832</span><span class="string">ac356-3c82-4c4d-a3dc-7489da152197</span></span><br></pre></td></tr></table></figure><h4 id="创建脚本-create-localstack-sh"><a href="#创建脚本-create-localstack-sh" class="headerlink" title="创建脚本 create-localstack.sh"></a>创建脚本 <code>create-localstack.sh</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">QUEUE_NAME=demo-queue</span><br><span class="line">TOPIC_NAME=demo-topic</span><br><span class="line">FUNCTION_NAME=demo-function</span><br><span class="line">APP_ENV=dev</span><br><span class="line"></span><br><span class="line">awslocal sns create-topic --name=$&#123;TOPIC_NAME&#125;</span><br><span class="line">awslocal sqs create-queue --queue-name=$&#123;QUEUE_NAME&#125;</span><br><span class="line">awslocal sns subscribe \</span><br><span class="line">    --topic-arn arn:aws:sns:ap-southeast-2:000000000000:$&#123;TOPIC_NAME&#125; \</span><br><span class="line">    --protocol sqs \</span><br><span class="line">    --notification-endpoint http://localhost:4566/000000000000/$&#123;QUEUE_NAME&#125;</span><br><span class="line"></span><br><span class="line">awslocal lambda create-function \</span><br><span class="line">    --code S3Bucket="__local__",S3Key="$&#123;LOCAL_CODE_PATH&#125;" \</span><br><span class="line">    --function-name $&#123;FUNCTION_NAME&#125; \</span><br><span class="line">    --runtime nodejs12.x \</span><br><span class="line">    --timeout 5 \</span><br><span class="line">    --handler dist/index.handler \</span><br><span class="line">    --role dev \</span><br><span class="line">    --environment "&#123;\"Variables\":&#123;\"APP_ENV\":\"$&#123;APP_ENV&#125;\"&#125;&#125;"</span><br><span class="line"></span><br><span class="line">awslocal lambda create-event-source-mapping \</span><br><span class="line">    --event-source-arn arn:aws:sqs:ap-southeast-2:000000000000:$&#123;QUEUE_NAME&#125; \</span><br><span class="line">    --function-name $&#123;FUNCTION_NAME&#125; \</span><br><span class="line">    --enabled</span><br></pre></td></tr></table></figure><h4 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h4><p>直接运行 <code>docker-compose up localstack</code></p><h4 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h4><p>现在在命令行发送一条 SNS 的消息，就可以 trigger 我们的 Lambda 执行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint-url=http://localhost:4566 sns publish --topic-arn arn:aws:sns:ap-southeast-2:000000000000:demo-topic --region ap-southeast-2 --message "Hello SNS - SQS - Lambda"</span><br></pre></td></tr></table></figure><p>在 Lambda 的 index.ts 写一个 <code>handler()</code> 方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./overwriteAwsLocalEndpoint'</span>); <span class="comment">//overwrite aws local endpoint,Please keep it here.</span></span><br><span class="line"><span class="keyword">import</span> &#123; SQSEvent, SQSHandler &#125; <span class="keyword">from</span> <span class="string">'aws-lambda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handler: SQSHandler = <span class="function">(<span class="params">event: SQSEvent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(event.Records));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印一下 SQS 的消息体。</p><p><strong>结果如下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">localstack    | &gt; START RequestId: ce5ae5ff-054d-16e0-dc62-71161118d3bd Version: <span class="variable">$LATEST</span></span><br><span class="line">localstack    | &gt; 2020-12-27T09:32:56.373Zce5ae5ff-054d-16e0-dc62-71161118d3bdINFO[&#123;<span class="string">"body"</span>:<span class="string">"&#123;\"Type\": \"Notification\", \"MessageId\": \"04c12e03-66d0-474a-a60a-f0b3c2451456\", \"Token\": null, \"TopicArn\": \"arn:aws:sns:ap-southeast-2:000000000000:demo-topic\", \"Message\": \"Hello SNS - SQS - Lambda\", \"SubscribeURL\": null, \"Timestamp\": \"2020-12-27T09:32:52.202Z\", \"SignatureVersion\": \"1\", \"Signature\": \"EXAMPLEpH+..\", \"SigningCertURL\": \"https://sns.us-east-1.amazonaws.com/SimpleNotificationService-0000000000000000000000.pem\"&#125;"</span>,<span class="string">"receiptHandle"</span>:<span class="string">"exexifyylldwuznxlicibcanaqvcplpaeoztcdlltkzbsuvwiifvlyixrxwuzrmumlmkggofmiencdxilzoaluyreszdppsbycpxcowwvmeiieeplulkitfztfxzkjazucucauhuobpvlzdcnjdcmygqvbrouxkxoggcfryzqtibyquhikawczuif"</span>,<span class="string">"md5OfBody"</span>:<span class="string">"d96df71c445e9282ed4c2fefbf4c8ca1"</span>,<span class="string">"eventSourceARN"</span>:<span class="string">"arn:aws:sqs:ap-southeast-2:000000000000:demo-queue"</span>,<span class="string">"eventSource"</span>:<span class="string">"aws:sqs"</span>,<span class="string">"awsRegion"</span>:<span class="string">"ap-southeast-2"</span>,<span class="string">"messageId"</span>:<span class="string">"a59f7c57-651b-54f6-70bd-a2933fa57099"</span>,<span class="string">"attributes"</span>:&#123;<span class="string">"SenderId"</span>:<span class="string">"AIDAIT2UOQQY3AUEKVGXU"</span>,<span class="string">"SentTimestamp"</span>:<span class="string">"1609061572241"</span>,<span class="string">"ApproximateReceiveCount"</span>:<span class="string">"1"</span>,<span class="string">"ApproximateFirstReceiveTimestamp"</span>:<span class="string">"1609061572312"</span>&#125;,<span class="string">"messageAttributes"</span>:&#123;&#125;,<span class="string">"md5OfMessageAttributes"</span>:null,<span class="string">"sqs"</span>:<span class="literal">true</span>&#125;]</span><br><span class="line">localstack    | &gt; END RequestId: ce5ae5ff-054d-16e0-dc62-71161118d3bd</span><br><span class="line">localstack    | &gt; REPORT RequestId: ce5ae5ff-054d-16e0-dc62-71161118d3bdInit Duration: 3381.65 msDuration: 13.13 msBilled Duration: 100 msMemory Size: 1536 MBMax Memory Used: 55 MB</span><br></pre></td></tr></table></figure><h3 id="关于-LocalStack-中-Lambda-的使用"><a href="#关于-LocalStack-中-Lambda-的使用" class="headerlink" title="关于 LocalStack 中 Lambda 的使用"></a>关于 LocalStack 中 Lambda 的使用</h3><p>在本地创建 Lambda 运行环境是我觉得诸多 service 中比较麻烦的一个，以下是官方对于 Lambda 的创建时候的<a href="https://github.com/localstack/localstack#configurations" target="_blank" rel="noopener">配置详解</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">STEPFUNCTIONS<span class="emphasis">_LAMBDA_</span>ENDPOINT: URL to use as the Lambda service endpoint in Step Functions. By default this is the LocalStack Lambda endpoint. Use default to select the original AWS Lambda endpoint.</span><br><span class="line"></span><br><span class="line">LAMBDA_EXECUTOR: Method to use for executing Lambda functions. Possible values are:</span><br><span class="line"></span><br><span class="line"><span class="code">- local: run Lambda functions in a temporary directory on the local machine</span></span><br><span class="line"><span class="code">- docker: run each function invocation in a separate Docker container</span></span><br><span class="line"><span class="code">- docker-reuse: create one Docker container per function and reuse it across invocations</span></span><br><span class="line"><span class="code">For docker and docker-reuse, if LocalStack itself is started inside Docker, then the docker command needs to be available inside the container (usually requires to run the container in privileged mode). Default is docker, fallback to local if Docker is not available.</span></span><br><span class="line"></span><br><span class="line">LAMBDA<span class="emphasis">_REMOTE_</span>DOCKER: determines whether Lambda code is copied or mounted into containers. Possible values are:</span><br><span class="line"></span><br><span class="line"><span class="code">- true (default): your Lambda function definitions will be passed to the container by copying the zip file (potentially slower). It allows for remote execution, where the host and the client are not on the same machine.</span></span><br><span class="line"><span class="code">- false: your Lambda function definitions will be passed to the container by mounting a volume (potentially faster). This requires to have the Docker client and the Docker host on the same machine.</span></span><br><span class="line"></span><br><span class="line">LAMBDA<span class="emphasis">_DOCKER_</span>NETWORK: Optional Docker network for the container running your lambda function.</span><br><span class="line"></span><br><span class="line">LAMBDA<span class="emphasis">_DOCKER_</span>DNS: Optional DNS server for the container running your lambda function.</span><br><span class="line"></span><br><span class="line">LAMBDA<span class="emphasis">_CONTAINER_</span>REGISTRY: Use an alternative docker registry to pull lambda execution containers (default: lambci/lambda).</span><br><span class="line"></span><br><span class="line">LAMBDA<span class="emphasis">_REMOVE_</span>CONTAINERS: Whether to remove containers after Lambdas finished executing (default: true).</span><br></pre></td></tr></table></figure><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ol><li>为什么我使用 SNS、KMS 总是报一些 client 的 credentials 的错误？<ul><li>因为没有覆盖 本地环境需要的 endpoint-url， 参考本文中的解释</li></ul></li><li>为什么给 SNS 发消息成功了却没有触发到 Lambda？<ul><li>请检查你的创建脚本，确保你的 SQS 订阅了 SNS 的对应 topic，SQS 有能够触发 Lambda 的 Mapping</li></ul></li><li>本例代码库地址？<ul><li><a href="https://github.com/Fatezhang/aws-localstack-demo" target="_blank" rel="noopener">Fatezhang/aws-localstack-demo</a></li></ul></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果你在使用 localstack 的时候遇到了什么问题，欢迎告诉我一起研究讨论。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/DBhQX3.jpg&quot; alt=&quot;DBhQX3&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;相信有很多同学公司项目都有用到 AWS 或者有同学在学习 AWS，我们知道像 AWS 这样的云服务，我们不太能很方便的去在本地开发的时候连接云上的服务，更何况 staging/production 环境还会有安全方面的考虑。那么当我们创建好一个项目的时候，我们如何去搭建其本地开发环境方便我们在本地开发调试呢？没错！使用 localstack！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/localstack/localstack&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LocalStack - A fully functional local AWS cloud stack&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;LocalStack provides an easy-to-use test/mocking framework for developing Cloud applications.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Currently, the focus is primarily on supporting the AWS cloud stack.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;LocalStack 是提供给开发者一个方便去测试和 mock 服务的框架， 目前主要提供 AWS 云服务。&lt;/p&gt;
    
    </summary>
    
      <category term="AWS" scheme="http://zhangjiaheng.cn/categories/AWS/"/>
    
    
      <category term="AWS" scheme="http://zhangjiaheng.cn/tags/AWS/"/>
    
      <category term="localstack" scheme="http://zhangjiaheng.cn/tags/localstack/"/>
    
  </entry>
  
  <entry>
    <title>让一切被中断的重新启动</title>
    <link href="http://zhangjiaheng.cn/blog/20200705/Make-everything-interrupted-reboot/"/>
    <id>http://zhangjiaheng.cn/blog/20200705/Make-everything-interrupted-reboot/</id>
    <published>2020-07-05T08:35:33.000Z</published>
    <updated>2022-11-29T14:56:28.794Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/cxlyp3.jpg" alt="cxlyp3"></p><a id="more"></a><p>2020年因为疫情原因导致自己浑浑噩噩地度过了半年时间，博客一直都没有更新，甚至都不知道自己每天在干什么。相比于 2019 年每天都拍一点视频记录一下自己干了些什么之外（其实每天也是一样枯燥无聊），2020 年这大半年好像是突然就消失掉了。</p><p>想要做的事情还有很多，所以今天打算整理一下思绪，三省一下吾身🧐。在 新公司工作 8 个月以来，好像失去了斗志，在这里每天做着一些简单的貌似无法提升自己的工作，其实有一些倦了。哎不过提升不提升都是看自己，也许是我现在太浮躁了。</p><p>从杭州回来之前想着每天工作轻松了可以做一些副业或者其他，比如视频剪辑，继续学习 <code>POPPIN</code> 之类的事情，但是现实是每天回到家就躺尸。西安的夏天每天8点才日落，真的感觉好浪费时间啊，大好的光阴都被自己挥霍掉了。20 年的后半年立一些F🚩L🇨🇳A🏳️‍🌈G吧，例如，多剪辑一些有趣的 VLOG（这个需要灵感），存一下钱（还好股票已经回本了），多去西安周边走一走（有驾照就方便了），谈个女朋友（这个对我来说其实是最难的，因为我发现自己其实是一个很闷的人，有时候就想一个人呆着不想和别人说话，和别人相处真的好累），还有健身（至少增重到 125 斤吧）先练出来一个好看的身体。</p><h3 id="剪辑"><a href="#剪辑" class="headerlink" title="剪辑"></a>剪辑</h3><p>2019 年每天都有拍一段小视频，20 年后半年不打算这样拍了，很耗费精力。也许在遇到一些好玩的东西的时候可以不用照片记录，而用一段简短的小视频记录下来（说到这里想起来 iPhone 的实况拍照功能，长按可以播放拍摄当时的视频片段，真的非常好用）。</p><p>也许可以花点时间学习一下稍微高级一点的剪辑技巧，emmm…看天分了吧，随缘学习。</p><h3 id="存钱"><a href="#存钱" class="headerlink" title="存钱"></a>存钱</h3><p>过年的时候数了数自己的存款发现也有十万呢，结果 20 年大半年过去了还是这个数目，不知道自己这大半年钱都去哪儿了。不科学啊，股票也回本了呢，在朋友那里放了 5 万，自己股票中留了 6 万，最近感觉牛市快来了呢，希望能够让我赚一些吧。有个在杭州的朋友最近遇到一些棘手的事情，需要打官司，可能还得赔十几万。哎，早就劝过他脚踏实地的赚钱，他从来没有听进去过我的一句话，其实我早就已经非常失望了。</p><p>以后我管好自己就行了，不去管别人好不好。</p><h3 id="户外"><a href="#户外" class="headerlink" title="户外"></a>户外</h3><p>回到西安以后好像就前段时间去了牛背梁。本来在五一的时候和成他们去太白山，因为一场婚礼没有去成，下一个目的地应该就是太白山了吧，和同事一起去。不过目前现阶段对我最重要的还是先尽快拿一下驾照。有了驾照会开车以后，秦岭我能每天下班去一趟哈哈。</p><p>哦对，我应该把去一些 livehouse，看糖蒜铺子脱口秀、看电影等等这种活动也算在户外这里，疫情原因有些一直都看不成，好气啊！</p><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><p>前段时间称了下体重，<em>57.8KG</em>， 好气啊，可能我的饮食习惯也不太好。我们组有三个同事都是健身大神，猛的不行。也许我也需要办一个健身卡？跟着大佬们把我这核心力量，手臂背胸肌练一练哈哈。🌚 短期目标 125 斤！</p><p>2020 年下半年就暂时立这么写 FALG 吧，希望都能够完成！</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Fatezhang/FigureCloud@master/uPic/cxlyp3.jpg&quot; alt=&quot;cxlyp3&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://zhangjiaheng.cn/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="程序人生" scheme="http://zhangjiaheng.cn/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发编程的一些总结</title>
    <link href="http://zhangjiaheng.cn/blog/20200129/Java-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://zhangjiaheng.cn/blog/20200129/Java-并发编程的一些总结/</id>
    <published>2020-01-29T15:06:28.000Z</published>
    <updated>2022-11-29T14:56:28.786Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3></blockquote><p>关于JAVA 并发编程的学习，我已零散的并不系统地积累了一些学习博客，如下：</p><p><a href="/blog/20190517/编写一个简易的可重入锁-一/">并发编程学习(一)：编写一个简易的可重入锁</a></p><p><a href="/blog/20190525/并发编程学习-二-：使用AQS编写可重入锁/">并发编程学习(二)：使用AQS编写可重入锁</a></p><p><a href="/blog/20190602/并发编程学习-三-：CountDownLatch的实现原理及使用/">并发编程学习(三)：CountDownLatch的实现原理及使用</a></p><p><a href="/blog/20190617/并发编程学习-四-：理解ThreadPoolExecutor线程池/">并发编程学习(四)：理解ThreadPoolExecutor线程池</a></p><p><a href="/blog/20190623/并发编程学习-五-：Semaphore源码学习及使用案例/">并发编程学习(五)：Semaphore源码学习及使用案例</a></p><p><a href="/blog/20190701/并发编程学习-六-：Exchanger的学习及使用场景/">并发编程学习(六)：Exchanger的学习及使用场景</a></p><p><a href="/blog/20190814/并发编程学习-七-：Fork-Join框架原理及demo/">并发编程学习(七)：Fork/Join框架原理及demo</a></p><p><a href="/blog/20190716/Synchronized使用时一个不起眼的注意点/">Synchronized使用时一个不起眼的注意点</a></p><p>这篇博客，制作了一个 Slide，来针对 Java 并发编程做一些小小的总结：</p><p><a href="/ppt/java-concurrent-knowledge.html">&gt; 点击查看 Slide</a></p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;关于JAVA 并发编程的学习，我已零散的并不系统地积累了一些学习博客，如下：&lt;/p&gt;

      
    
    </summary>
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="并发编程" scheme="http://zhangjiaheng.cn/categories/Java%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="并发编程" scheme="http://zhangjiaheng.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>How to Use Junit5 to Test You Java Application Elegantly</title>
    <link href="http://zhangjiaheng.cn/blog/20200115/How-to-use-Junit5-to-test-you-java-application-elegantly/"/>
    <id>http://zhangjiaheng.cn/blog/20200115/How-to-use-Junit5-to-test-you-java-application-elegantly/</id>
    <published>2020-01-15T07:25:14.000Z</published>
    <updated>2022-11-29T14:56:28.785Z</updated>
    
    <content type="html"><![CDATA[<h1 align="center">Junit5 的一些实际开发中常用的功能【 TDD 向 】</h1><p><img src="/blog/20200115/How-to-use-Junit5-to-test-you-java-application-elegantly/junit5.png" alt="Junit"></p><a id="more"></a><blockquote><p>这篇博客本来应该写于鼠年过年之前，谁想到犯了个懒，现在怀着沉重的心情写下这篇博客~</p><p>因为中国现在正在受着新型冠状病毒疫情的危害，大过年的门都出不去，都躲在家里生怕被感染。无聊的我只能学习学习来打发一下枯燥的假期生活哈哈~</p></blockquote><h3 id="Junit5"><a href="#Junit5" class="headerlink" title="Junit5"></a>Junit5</h3><p>说到 JUNIT5 可能很多人都不陌生，就是一个测试框架而已。但是相信大部分的程序员都没有用过，感觉国内好多公司都没有写测试的习惯，也许是产品催需求催的太紧ε=(´ο｀*)))。我就不在这里介绍 Junit5 了，没有前置知识的话需要看一下：<a href="https://junit.org/junit5/" target="_blank" rel="noopener">Junit5</a>，我只在这篇博客介绍一下我在工作中是如何使用 Junit5 的。</p><h3 id="基本的测试代码"><a href="#基本的测试代码" class="headerlink" title="基本的测试代码"></a>基本的测试代码</h3><p>首先 gradle需要引入 Junit5 以及其他相关的依赖：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testImplementation <span class="string">'org.mockito:mockito-core:2.24.0'</span></span><br><span class="line">testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-api:5.2.0'</span></span><br><span class="line">testImplementation <span class="string">'org.junit.jupiter:junit-jupiter-params:5.2.0'</span></span><br><span class="line">testRuntimeOnly <span class="string">'org.junit.jupiter:junit-jupiter-engine:5.2.0'</span></span><br><span class="line">testImplementation <span class="string">"org.testcontainers:junit-jupiter:1.12.3"</span></span><br><span class="line">testImplementation <span class="string">"org.testcontainers:postgresql:1.12.3"</span></span><br><span class="line">testImplementation <span class="string">'org.mockito:mockito-junit-jupiter:3.1.0'</span></span><br><span class="line">testImplementation <span class="string">'org.hamcrest:hamcrest:2.2'</span></span><br></pre></td></tr></table></figure><p>然后编写一个简单的测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shouldReturnObjectsGivenValidIdWhenGetObjects</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  when(objectService.findApplications(OBJECT_ID)).thenReturn(mockObjects);</span><br><span class="line"></span><br><span class="line">  var responseEntity = objectsController.getObjects(<span class="keyword">null</span>);</span><br><span class="line">  </span><br><span class="line">  assertThat(HttpStatus.OK).isEqualTo(responseEntity.getStatusCode());</span><br><span class="line">  assertThat(responseEntity.getBody()).isEqualTo(mockGetObjectsResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明一下，以上测试用例的编写需要注意以下几点：</p><ol><li>方法命名<br>一般的写测试的时候，方法的命名要求解释测试的功能，需要包含 should/given/when 条件。如以上方法的命名<code>shouldReturnObjectsGivenValidIdWhenGetObjects</code>是指当调用getObjects()的时候，给定一个合法的 ID，能够返回一组 Objects。</li><li>方法的条件、执行、以及对于结果的验证的代码换行隔开</li><li>使用 assertThat()验证结果：<br><code>assertThat</code>方法是包<code>import static org.assertj.core.api.Assertions.assertThat;</code>中的方法。它接收一个实际的值，然后再使用<code>isEqualTo</code>等方法判断上一个执行结果是否正确。</li></ol><h3 id="在类中的测试执行之前执行一次代码"><a href="#在类中的测试执行之前执行一次代码" class="headerlink" title="在类中的测试执行之前执行一次代码"></a>在类中的测试执行之前执行一次代码</h3><p>以下代码使用<code>@BeforeAll</code>注解在方法 setupMDC 上面，并且这个方法必须是 static 静态方法。是指在所有类中的测试方法执行之前只执行一次该方法。一般用于设置无状态的全局变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@BeforeAll</span><br><span class="line">static void setupMDC() &#123;</span><br><span class="line">    MDC.put(TRANSACTION_ID, UUID.randomUUID().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在每个测试方法之前都执行一些代码"><a href="#在每个测试方法之前都执行一些代码" class="headerlink" title="在每个测试方法之前都执行一些代码"></a>在每个测试方法之前都执行一些代码</h3><p>以下代码使用<code>@BeforeEach</code>注解，可以在每一个方法执行之前都执行该方法，用于每个方法执行前的初始化或者做一些共同的 mock 操作，相当于 AOP 的 Before。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  when(service.save(any(String.class), any(UUID.class), any(UUID.class))).thenReturn(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他的比如<code>@AfterAll</code> <code>@AfterEach</code>等等功能依次类推。</p><h3 id="测试分层"><a href="#测试分层" class="headerlink" title="测试分层"></a>测试分层</h3><p>在使用 Junit5 测试过程中，最让我觉得方便的是对于测试类的结构划分方式：内部类。通过内部类，我们可以将我们要测试的东西使用类结构的形式去进行描述（使用注解<code>@Nested</code>修饰），然后再在类中编写相应的测试方法进行具体的测试。</p><p>比如一个 Controller 需要测试 create/update/get 等方法，就可以将这几个方法依次编写内部类分开描述，然后再在类中对于不同的分支编写测试方法进行单元测试，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExtendWith</span>(MockitoExtension.class)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectsControllerTest</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CreateObjects</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">someTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// some code</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UpdateObjects</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">someTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// some code</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">GetObjects</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">someTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// some code</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是我在编写 unit 测试的时候的一些小小的总结，以后会继续加深对于测试代码编写的学习，实际上测试才是写代码过程中最重要的一环，可以保障系统的功能的正确性，还能保护重构。Junit5 为 JAVA 程序员提供了更强大、方便的测试框架，值得深入研究使用。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;h1 align=&quot;center&quot;&gt;Junit5 的一些实际开发中常用的功能【 TDD 向 】&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/blog/20200115/How-to-use-Junit5-to-test-you-java-application-elegantly/junit5.png&quot; alt=&quot;Junit&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Junit5" scheme="http://zhangjiaheng.cn/categories/Junit5/"/>
    
      <category term="Unit Test" scheme="http://zhangjiaheng.cn/categories/Junit5/Unit-Test/"/>
    
    
      <category term="Junit5" scheme="http://zhangjiaheng.cn/tags/Junit5/"/>
    
      <category term="Java 基础" scheme="http://zhangjiaheng.cn/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
      <category term="单元测试" scheme="http://zhangjiaheng.cn/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="unit test" scheme="http://zhangjiaheng.cn/tags/unit-test/"/>
    
  </entry>
  
  <entry>
    <title> 解决@ResuestBody中的 JSON 自动转化非 Boolean 为 Boolean 值</title>
    <link href="http://zhangjiaheng.cn/blog/20191217/%E8%A7%A3%E5%86%B3-ResuestBody%E4%B8%AD%E7%9A%84-JSON-%E8%87%AA%E5%8A%A8%E8%BD%AC%E5%8C%96%E9%9D%9E-boolean-%E4%B8%BA-boolean-%E5%80%BC/"/>
    <id>http://zhangjiaheng.cn/blog/20191217/解决-ResuestBody中的-JSON-自动转化非-boolean-为-boolean-值/</id>
    <published>2019-12-17T04:39:58.000Z</published>
    <updated>2022-11-29T14:56:28.864Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/20191217/解决-ResuestBody中的-JSON-自动转化非-boolean-为-boolean-值/code.jpg" alt="封面"></p><a id="more"></a><h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>当我们在 SpringBoot 中写 API 的时候，通常我们会使用<code>@RequestBody</code>注解一个参数将这个对象标记之后，然后我们在请求头使用<code>application/json</code>调用这个 API，传入 JSON 的 body 体，就可以自动的将我们的 JSON 转化成 JAVA 对象。但是，当我使用的 JAVA 对象中有个 Boolean 的字段的时候，我的 JSON 的 body 对这个对象传数值、”True”等等其他值得时候，往往会被默认转成相应的 true 或者 false。例如传入{“able”:0}的时候，我的对象中的 able 字段就是 false。但是我不想要这个功能，我希望接口调用者传的类型都是 Boolean 类型。</p><h2 id="Debug-源码"><a href="#Debug-源码" class="headerlink" title="Debug 源码"></a>Debug 源码</h2><p>首先你要知道，在 SpringBoot 或者 SpringMVC 中对于request 和 response 的处理是使用的消息转换器处理的。所以我在 debug 源码的时候发现，SpringBoot 使用<code>MappingJackson2HttpMessageConverter</code>处理 JSON 转化成对象，然后实际的转化方法<code>MappingJackson2HttpMessageConverter</code>没有重写，而是交给父类<code>AbstractJackson2HttpMessageConverter</code>的方法，在该类的第239 行会发现实际上是使用的 <code>this.objectMapper.readValue(inputMessage.getBody(), javaType);</code> 将一个 JSON 字符串转化成 JAVA 对象。再进去看下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">readValue</span><span class="params">(InputStream src, JavaType valueType)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> IOException, JsonParseException, JsonMappingException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>_readMapAndClose</code>方法是这样的(重点看下 4013 行)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">_readMapAndClose</span><span class="params">(JsonParser p0, JavaType valueType)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">try</span> (JsonParser p = p0) &#123;</span><br><span class="line">    Object result;</span><br><span class="line">    JsonToken t = _initForReading(p, valueType);</span><br><span class="line">    <span class="keyword">final</span> DeserializationConfig cfg = getDeserializationConfig();</span><br><span class="line">    <span class="keyword">final</span> DeserializationContext ctxt = createDeserializationContext(p, cfg);</span><br><span class="line">    <span class="keyword">if</span> (t == JsonToken.VALUE_NULL) &#123;</span><br><span class="line">      <span class="comment">// Ask JsonDeserializer what 'null value' to use:</span></span><br><span class="line">      result = _findRootDeserializer(ctxt, valueType).getNullValue(ctxt);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) &#123;</span><br><span class="line">      result = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      JsonDeserializer&lt;Object&gt; deser = _findRootDeserializer(ctxt, valueType);</span><br><span class="line">      <span class="keyword">if</span> (cfg.useRootWrapping()) &#123;</span><br><span class="line">        result = _unwrapAndDeserialize(p, ctxt, cfg, valueType, deser);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = deser.deserialize(p, ctxt);</span><br><span class="line">      &#125;</span><br><span class="line">      ctxt.checkUnresolvedObjectId();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cfg.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) &#123;</span><br><span class="line">      _verifyNoTrailingTokens(p, ctxt, valueType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这行代码<code>result = deser.deserialize(p, ctxt);</code>使用一个反序列化对象进行 JSON 的反序列化，这里如果传入的是数字转化成 Boolean的话就是用的是<code>NumberDeserializers</code>中的<code>BooleanDeserializer</code>，而它的<code>deserialize</code>方法是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">deserialize</span><span class="params">(JsonParser p, DeserializationContext ctxt)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  JsonToken t = p.getCurrentToken();</span><br><span class="line">  <span class="keyword">if</span> (t == JsonToken.VALUE_TRUE) &#123;</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (t == JsonToken.VALUE_FALSE) &#123;</span><br><span class="line">    <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _parseBoolean(p, ctxt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后<code>_parseBoolean</code>中将其他的数值转化成 Boolean。</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>以上就是整个 debug 的全过程了，总结一下就是<code>AbstractJackson2HttpMessageConverter</code>中会默认地将非 Boolean 的数值转化成 Boolean。那么如何解决这个问题呢？</p><p>首先使用搜索引擎解决😹然后搜索不到。。。然后我在 StackOverFlow 上提了一个<a href="https://stackoverflow.com/questions/59353379/springboot-atomically-convert-integer-to-boolean-with-requestbody-annotation-h/59355180#59355180" target="_blank" rel="noopener">问题 &lt;click</a>。简单来说就是以下这种方式：</p><ul><li><p>自定义自己的反序列化工具，然后让 Spring 去管理这个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleModule <span class="title">addDeserializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleModule().addDeserializer(Boolean.class, <span class="keyword">new</span> MyDeserializer());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">deserialize</span><span class="params">(JsonParser p, DeserializationContext ctxt)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            JsonToken t = p.getCurrentToken();</span><br><span class="line">            <span class="keyword">if</span> (t == JsonToken.VALUE_TRUE) &#123;</span><br><span class="line">                <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t == JsonToken.VALUE_FALSE) &#123;</span><br><span class="line">                <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t == JsonToken.VALUE_STRING) &#123;</span><br><span class="line">                String value = p.getValueAsString();</span><br><span class="line">                <span class="keyword">return</span> value.equals(<span class="string">"true"</span>) ? <span class="keyword">true</span> : value.equals(<span class="string">"false"</span>) ? <span class="keyword">false</span> : <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这样就将所有 API 中，存在 Boolean 的情况都处理掉了。只能接受 Boolean 值或者字符串的”true”或者”false”。</p><p>但是作为一个优秀(pa ma fan)的👩‍💻coder😷，我们应该保证自己修改的代码不会影响到其他人或者其他模块，随便的修改全局的配置不太好。所以我寻找到了一个更加୧(๑•̀◡•́๑)૭的方式 —— 编写一个该属性的 set 方法即可。</p><p>因为Deserializer会将读取到的 JSON 的值通过 set 方法填入对象中，所以这种方式也是完全可行的，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAble</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">    able = (Boolean) value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"true"</span>.equals(value)) &#123;</span><br><span class="line">    able = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，大功告成。但是实际上整个过程 debug 的时候是最有意思的，可以了解到它在转换的过程中实际上都做了些什么事情。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/20191217/解决-ResuestBody中的-JSON-自动转化非-boolean-为-boolean-值/code.jpg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://zhangjiaheng.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://zhangjiaheng.cn/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="http://zhangjiaheng.cn/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://zhangjiaheng.cn/tags/SpringMVC/"/>
    
      <category term="JSON" scheme="http://zhangjiaheng.cn/tags/JSON/"/>
    
      <category term="converter" scheme="http://zhangjiaheng.cn/tags/converter/"/>
    
      <category term="RequestBody" scheme="http://zhangjiaheng.cn/tags/RequestBody/"/>
    
  </entry>
  
  <entry>
    <title>如何在 SpringCloud 微服务项目中一键部署 Docker 启动</title>
    <link href="http://zhangjiaheng.cn/blog/20191211/%E5%A6%82%E4%BD%95%E5%9C%A8-SpringCloud-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2-docker-%E5%90%AF%E5%8A%A8/"/>
    <id>http://zhangjiaheng.cn/blog/20191211/如何在-SpringCloud-微服务项目中一键部署-docker-启动/</id>
    <published>2019-12-11T10:26:46.000Z</published>
    <updated>2022-11-29T14:56:28.824Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/20191211/如何在-SpringCloud-微服务项目中一键部署-docker-启动/docker.jpg" alt=""></p><a id="more"></a><h2 id="如何用-docker-一键启动-SpringCloud-微服务？"><a href="#如何用-docker-一键启动-SpringCloud-微服务？" class="headerlink" title="如何用 docker 一键启动 SpringCloud 微服务？"></a>如何用 docker 一键启动 SpringCloud 微服务？</h2><h3 id="为什么要使用-docker-启动我们的微服务？"><a href="#为什么要使用-docker-启动我们的微服务？" class="headerlink" title="为什么要使用 docker 启动我们的微服务？"></a>为什么要使用 docker 启动我们的微服务？</h3><p>原始传统的部署方式为我们带来了太多问题，比如当你的服务在测试环境正运行的正常，但是部署到生产环境就会出现一大堆未知问题，你查了好久，debug 代码之后发现，仅仅是一个环境变量没有设置正确，导致产生了目前这么一大串问题，浪费了你的时间，拖延了项目上线的时间，甚至产生了严重的生产事故。这个时候，我们就需要一个机制来保证我们的代码在部署到本地、测试以及生产的时候，我们的代码不会受到环境不一致的影响而导致我们部署失败！</p><p>还有就是我们可以使用 docker 打包镜像然后使用 docker-compose 编排容器一键启动，让运维自动化，极大的节省我们的工作时间。</p><h3 id="在-Spring-Cloud-微服务项目中如何使用-DOCKER？"><a href="#在-Spring-Cloud-微服务项目中如何使用-DOCKER？" class="headerlink" title="在 Spring-Cloud 微服务项目中如何使用 DOCKER？"></a>在 Spring-Cloud 微服务项目中如何使用 DOCKER？</h3><h4 id="首先我们需要将我们的每一个服务打包成镜像"><a href="#首先我们需要将我们的每一个服务打包成镜像" class="headerlink" title="首先我们需要将我们的每一个服务打包成镜像"></a>首先我们需要将我们的每一个服务打包成镜像</h4><p>例如我的<a href="https://github.com/Fatezhang/scaffold-cloud/blob/a6dd55772f59eecd99b099e013ce2ef4470cec91/scaffold-eureka/pom.xml#L43" target="_blank" rel="noopener"> Scaffold-Cloud 项目中的 eureka 服务的 pom 文件</a>(点击链接跳转到 github 以下代码行)如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>scaffold-cloud/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">forceTags</span>&gt;</span>true<span class="tag">&lt;/<span class="name">forceTags</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后其他模块也一样，在 pom 文件中加入以上 maven 插件，完整项目代码如下(觉得好用 star✨一下哦)：</p><p><a href="https://github.com/Fatezhang/scaffold-cloud" target="_blank" rel="noopener">https://github.com/Fatezhang/scaffold-cloud/</a></p><h4 id="使用脚本一键创建-docker-镜像"><a href="#使用脚本一键创建-docker-镜像" class="headerlink" title="使用脚本一键创建 docker 镜像"></a>使用脚本一键创建 docker 镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo "============start to package with maven and recreate docker image=============="</span><br><span class="line"></span><br><span class="line">SERVICE_FOLDERS=(</span><br><span class="line">  scaffold-eureka</span><br><span class="line">  scaffold-zuul</span><br><span class="line">  scaffold-tx-manager</span><br><span class="line">  scaffold-business/scaffold-business-sys-service</span><br><span class="line">  scaffold-business/scaffold-business-job-service</span><br><span class="line">  scaffold-business/scaffold-business-thirdparty-service</span><br><span class="line">  scaffold-route/scaffold-route-app</span><br><span class="line">  scaffold-route/scaffold-route-openapi</span><br><span class="line">  scaffold-route/scaffold-route-operate</span><br><span class="line">)</span><br><span class="line">path=</span><br><span class="line">for (( i = 0; i &lt; $&#123;#SERVICE_FOLDERS[@]&#125;; i++ )); do</span><br><span class="line">    path=$&#123;SERVICE_FOLDERS[$&#123;i&#125;]&#125;</span><br><span class="line">    echo "进入目录 &gt;&gt;&gt;&gt; cd $&#123;path&#125;"</span><br><span class="line">    cd "$&#123;path&#125;" || exit</span><br><span class="line">    pwd</span><br><span class="line">    mvn clean package docker:build -Pdocker</span><br><span class="line">    cd - || exit</span><br><span class="line">done</span><br><span class="line">echo "============                      create end                     =============="</span><br></pre></td></tr></table></figure><h4 id="编排-docker-compose-启动所有微服务"><a href="#编排-docker-compose-启动所有微服务" class="headerlink" title="编排 docker-compose 启动所有微服务"></a>编排 docker-compose 启动所有微服务</h4><p>然后只需要将所有镜像编排在 docker-compose.yml 文件中即可，其中所有的容器都在同一个网络中以访问到对方服务，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">scaffold-cloud</span></span><br></pre></td></tr></table></figure><p>完整的 docker-compose.yml 文件如下（注意有一个<code>wait-for-it.sh</code>）：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.7"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  micro-sys:</span></span><br><span class="line"><span class="attr">    entrypoint:</span> <span class="string">./wait-for-it.sh</span> <span class="attr">tx_manager:7970</span> <span class="string">'java -jar scaffold-business-sys-service-1.0-SNAPSHOT.jar'</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">scaffold-cloud/scaffold-business-sys-service:1.0-SNAPSHOT</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/tmp:/tmp</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./.scripts/wait-for-it.sh:/wait-for-it.sh</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8750</span><span class="string">:8750</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">redis</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">rmqbroker</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">rmqnamesrv</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">tx_manager</span></span><br><span class="line"><span class="attr">  route-operate:</span></span><br><span class="line"><span class="attr">    entrypoint:</span> <span class="string">./wait-for-it.sh</span> <span class="attr">micro-sys:8750</span> <span class="string">'java -jar scaffold-route-operate-1.0-SNAPSHOT.jar'</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">scaffold-cloud/scaffold-route-operate:1.0-SNAPSHOT</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/tmp:/tmp</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./.scripts/wait-for-it.sh:/wait-for-it.sh</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8850</span><span class="string">:8850</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">micro-sys</span></span><br><span class="line"><span class="attr">  eureka:</span></span><br><span class="line"><span class="attr">    entrypoint:</span> <span class="string">java</span> <span class="bullet">-jar</span> <span class="string">scaffold-eureka-1.0-SNAPSHOT.jar</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">scaffold-cloud/scaffold-eureka:1.0-SNAPSHOT</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/tmp:/tmp</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8761</span><span class="string">:8761</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">  zuul:</span></span><br><span class="line"><span class="attr">    entrypoint:</span> <span class="string">./wait-for-it.sh</span> <span class="attr">eureka:8761</span> <span class="string">'java -jar scaffold-zuul-1.0-SNAPSHOT.jar'</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">scaffold-cloud/scaffold-zuul:1.0-SNAPSHOT</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/tmp:/tmp</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./.scripts/wait-for-it.sh:/wait-for-it.sh</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8861</span><span class="string">:8861</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka</span></span><br><span class="line"><span class="attr">  tx_manager:</span></span><br><span class="line"><span class="attr">    entrypoint:</span> <span class="string">./wait-for-it.sh</span> <span class="attr">mysql:3306,redis:6379</span> <span class="string">'java -jar scaffold-txmanager-1.0-SNAPSHOT.jar'</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">scaffold-cloud/scaffold-txmanager:1.0-SNAPSHOT</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/tmp:/tmp</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./.scripts/wait-for-it.sh:/wait-for-it.sh</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8890</span><span class="string">:8890</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">7970</span><span class="string">:7970</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">redis</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">eureka</span></span><br><span class="line"><span class="attr">  mysql:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">mysql/mysql-server:5.7</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./mysql/data:/var/lib/mysql</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./mysql/config/my.cnf:/etc/my.cnf</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./mysql/init:/docker-entrypoint-initdb.d/</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">redis:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">redis-server</span> <span class="bullet">--requirepass</span> <span class="string">pwd8ok8</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">  rmqnamesrv:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">foxiswho/rocketmq:server-4.5.2</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">rmqnamesrv</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./rmq/logs:/opt/logs</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./rmq/store:/opt/store</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      JAVA_OPT_EXT:</span> <span class="string">"-Duser.home=/opt -Xms128m -Xmx128m -Xmn128m"</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">  rmqbroker:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">foxiswho/rocketmq:broker-4.5.2</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">rmqbroker</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">10909</span><span class="string">:10909</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">10911</span><span class="string">:10911</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./rmq/logs:/opt/logs</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./rmq/store:/opt/store</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./rmq/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      JAVA_OPT_EXT:</span> <span class="string">"-Duser.home=/opt -server -Xms128m -Xmx128m -Xmn128m"</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">["/bin/bash","mqbroker","-c","/etc/rocketmq/broker.conf","-n","rmqnamesrv:9876","autoCreateTopicEnable=true"]</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">rmqnamesrv</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">scaffold-cloud</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  rmqconsole:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">styletang/rocketmq-console-ng</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">rmqconsole</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8180</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      JAVA_OPTS:</span> <span class="string">"-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">rmqnamesrv</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  scaffold-cloud:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">scaffold-cloud</span></span><br><span class="line"><span class="attr">    driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure></p><h4 id="如何在启动所有微服务的时候按顺序启动呢？"><a href="#如何在启动所有微服务的时候按顺序启动呢？" class="headerlink" title="如何在启动所有微服务的时候按顺序启动呢？"></a>如何在启动所有微服务的时候按顺序启动呢？</h4><p>我们知道，SpringCloud 微服务中各个服务之间可能存在依赖关系，比如 tx-manager 服务需要等待 MySQL 和 Redis 都启动完成之后才能够顺利启动，但是 docker-compose.yml 文件中的 <code>depends_on</code>只能等待 docker 容器启动成功，而不能等待 docker 容器中的服务启动完成！</p><p>docker 官方给出的方案是使用wait-for-it.sh脚本，在容器启动之前执行脚本，判断依赖的服务和端口是否启动成功，然后再执行自己服务的启动命令。</p><p>所以我们也是这样去写一个脚本：<code>wait-for-it.sh</code>如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> shellcheck <span class="built_in">disable</span>=SC2223</span></span><br><span class="line">: $&#123;SLEEP_SECOND:=2&#125;</span><br><span class="line"></span><br><span class="line">wait_for() &#123;</span><br><span class="line">  echo Waiting for $1 on port $2... ...</span><br><span class="line"><span class="meta">  #</span><span class="bash"> shellcheck <span class="built_in">disable</span>=SC2086</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> shellcheck <span class="built_in">disable</span>=SC2188</span></span><br><span class="line">  while ! &lt;/dev/tcp/$1/$2; do</span><br><span class="line">    echo Waiting for $1 on port $2... ...</span><br><span class="line">    sleep $SLEEP_SECOND</span><br><span class="line">  done</span><br><span class="line">  echo Server:"$1" on port:"$2" is running... ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SER_STRS=$1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> shellcheck <span class="built_in">disable</span>=SC2207</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shellcheck <span class="built_in">disable</span>=SC2006</span></span><br><span class="line">SERVICES_PORTS=($(echo "$SER_STRS" | tr ',' ' '))</span><br><span class="line"></span><br><span class="line">THEN_COMMAND=$2</span><br><span class="line"></span><br><span class="line">for ((i = 0; i &lt; $&#123;#SERVICES_PORTS[@]&#125;; i++)); do</span><br><span class="line">  SERVICE_PORT=$&#123;SERVICES_PORTS[$&#123;i&#125;]&#125;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> shellcheck <span class="built_in">disable</span>=SC2207</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> shellcheck <span class="built_in">disable</span>=SC2006</span></span><br><span class="line">  array=($(echo "$SERVICE_PORT" | tr ':' ' '))</span><br><span class="line">  servername=$&#123;array[0]&#125;</span><br><span class="line">  serverport=$&#123;array[1]&#125;</span><br><span class="line">  wait_for "$servername" "$&#123;serverport&#125;"</span><br><span class="line">done</span><br><span class="line">echo "start to run command: $THEN_COMMAND"</span><br><span class="line"><span class="meta">#</span><span class="bash"> shellcheck <span class="built_in">disable</span>=SC2004</span></span><br><span class="line">if [ "$THEN_COMMAND" ]; then</span><br><span class="line">  eval "$THEN_COMMAND"</span><br><span class="line">else</span><br><span class="line"><span class="meta">  #</span><span class="bash"> shellcheck <span class="built_in">disable</span>=SC2102</span></span><br><span class="line">  echo command: [$THEN_COMMAND] is invalid... ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>上述脚本的作用就是等待启动的服务以及端口启动成功，没有成功的话就继续 wait 等待，默认等待 2 秒，启动成功的话就执行自己的启动命令。</p><p>使用方式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tx_manager:</span></span><br><span class="line"><span class="attr">    entrypoint:</span> <span class="string">./wait-for-it.sh</span> <span class="attr">mysql:3306,redis:6379</span> <span class="string">'java -jar scaffold-txmanager-1.0-SNAPSHOT.jar'</span></span><br></pre></td></tr></table></figure><p>所以，以上就是使用 docker 启动 SpringCloud 微服务的全部内容，如果你觉得有用，希望能够给我的项目<a href="https://github.com/Fatezhang/scaffold-cloud/点个star" target="_blank" rel="noopener">https://github.com/Fatezhang/scaffold-cloud/点个star</a> 哦~</p><p>而且你也可以给我提 issue，提 PR，欢迎一起交流学习，一起开发~</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/20191211/如何在-SpringCloud-微服务项目中一键部署-docker-启动/docker.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="http://zhangjiaheng.cn/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://zhangjiaheng.cn/tags/SpringCloud/"/>
    
      <category term="微服务" scheme="http://zhangjiaheng.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="springboot" scheme="http://zhangjiaheng.cn/tags/springboot/"/>
    
      <category term="spring" scheme="http://zhangjiaheng.cn/tags/spring/"/>
    
      <category term="docker" scheme="http://zhangjiaheng.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Write a Blog in English</title>
    <link href="http://zhangjiaheng.cn/blog/20191105/Write-a-blog-in-English/"/>
    <id>http://zhangjiaheng.cn/blog/20191105/Write-a-blog-in-English/</id>
    <published>2019-11-05T14:55:46.000Z</published>
    <updated>2022-11-29T14:56:28.799Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="English study" scheme="http://zhangjiaheng.cn/categories/English-study/"/>
    
    
      <category term="程序人生" scheme="http://zhangjiaheng.cn/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
      <category term="English study" scheme="http://zhangjiaheng.cn/tags/English-study/"/>
    
      <category term="English blogs" scheme="http://zhangjiaheng.cn/tags/English-blogs/"/>
    
  </entry>
  
  <entry>
    <title>Scaffold-Cloud —— SpringCloud微服务架构实践</title>
    <link href="http://zhangjiaheng.cn/blog/20191025/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/"/>
    <id>http://zhangjiaheng.cn/blog/20191025/SpringCloud微服务架构实践/</id>
    <published>2019-10-25T06:42:24.000Z</published>
    <updated>2022-11-29T14:56:28.795Z</updated>
    
    <content type="html"><![CDATA[<p><center><u style="font-size=16px;"><a href="/">Scaffold-Cloud: SpringCloud微服务脚手架</a></u></center> <a href="https://mubu.com/doc/6NZlNw3DIw" target="_blank" rel="noopener">幕布</a><br>Scaffold-Cloud 是一个适用于开发者学习的 Spring-Cloud 微服务项目脚手架。项目期望集成大部分目前互联网公司使用的主流的Spring-Cloud微服务相关工具和服务。并结合一些实际的业务增加一些其他功能，如：分布式事务、定时任务、消息队列、日志分析等等，然后加入 CI/CD 并引入 docker 部署。</p><p>Scaffold-Cloud 基于 SpringCloud Netflix 全家桶进行微服务项目的构建，所以在这之前，使用 Scaffold-Cloud 需要先了解下 SpringCloud 以及 Netflix 工具全家桶。</p><p><img src="/blog/20191025/SpringCloud微服务架构实践/netflix.png" alt=""></p><p><center><u style="font-size=6px; color:gray">Sorry, NetFlix is not available in your country yet.</u></center><br><a id="more"></a></p><h2 id="Spring-Cloud-介绍"><a href="#Spring-Cloud-介绍" class="headerlink" title="Spring Cloud 介绍"></a>Spring Cloud 介绍</h2><h4 id="从单体应用到微服务"><a href="#从单体应用到微服务" class="headerlink" title="从单体应用到微服务"></a>从单体应用到微服务</h4><p>在早期的企业中，项目基本上都是单体应用，将一个网站部署在一台单独的服务器上对用户提供服务。但是这样的服务最大的缺点就是，当服务器断电或者服务进程挂掉，用户直接就无法访问。后来演进出集群服务，将同样的服务在多台服务器分别部署，使用负载均衡等手段让服务对于用户来说看到的都是同一个，这样当一台服务器夯机至少还有其他的服务器提供相同的应用。</p><p>但是，当企业级服务变得越来越复杂的时候，项目变得越来越庞大，有时甚至影响到了服务的部署，这个时候就应该将庞大的服务拆分成多个子系统，部署在不同的服务器上，这样的服务当遭遇高并发访问的时候也能够将请求压力分摊到多个服务器上，这就是分布式。</p><p>而当企业需要开启一个新的项目时，为了避免重复造轮子，往往一些可复用的模块会被拆分出来作为一个微小的系统，它可以独立的开发、设计、运行和运维，只需要使用 ESB企业服务总线将所有服务整合并提供统一的访问入口，就能够复用，这就是 SOA。</p><p>而微服务是对以上服务架构的最终演进结构：将服务切分成多个微小的应用，提供统一的服务访问协议HTTP(SpringCloud)/TCP(Dubbo)，强调运行时的分散解耦，在业务上也有着高度的抽离。</p><blockquote><p><code>微服务架构风格</code><strong>是一种将<code>一个单一应用程序</code>开发为<code>一组小型服务</code>的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制</strong>(通常使用HTTP资源API)。这些<strong>服务围绕<code>业务能力</code>构建</strong>，并且可通过<strong>全自动部署机制独立部署</strong>。这些服务共用一个<strong>最小型的集中式的管理</strong>，服务可用不同的语言开发，使用不同的<strong>数据存储技术</strong>。<br><img src="/blog/20191025/SpringCloud微服务架构实践/microservice.webp" alt=""><br>—— Martin Fowler</p></blockquote><p><strong>但是拆分成这么微小的微服务一定会碰到各种各样的问题——如何拆分？服务之间如何发现？如何授权？如何做负载均衡？如何管理多服务配置？如何跟踪调用链路？如何实时查看服务状态等等… … SpringCloud 就是以上一系列问题的 Solver。它提供了一整套的解决方案！</strong></p><h4 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h4><p>首先，SpringCloud 并不是一个框架，而是一个微服务的规范，或者说是一个微服务工具集合。</p><h5 id="SpringCloud特点："><a href="#SpringCloud特点：" class="headerlink" title="SpringCloud特点："></a>SpringCloud特点：</h5><ul><li>约定大于配置，基于 SpringBoot</li><li>开发部署于各种环境，AWS，阿里云，PC 等</li><li>隐藏组件复杂性，声明式配置，无 xml</li><li>开箱即用，快速启动</li><li>丰富的轻量级组件</li><li>灵活选型，如注册发现可用 eureka，zookeeper 或者 Redis</li></ul><h5 id="SpringCloud-各版本组件及版本兼容性"><a href="#SpringCloud-各版本组件及版本兼容性" class="headerlink" title="SpringCloud 各版本组件及版本兼容性"></a>SpringCloud 各版本组件及<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">版本兼容性</a></h5><table><thead><tr><th>Component</th><th>Edgware.SR6</th><th>Greenwich.SR2</th><th>Greenwich.BUILD-SNAPSHOT</th></tr></thead><tbody><tr><td>spring-cloud-aws</td><td>1.2.4.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-bus</td><td>1.3.4.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cli</td><td>1.4.1.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-commons</td><td>1.3.6.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-contract</td><td>1.2.7.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-config</td><td>1.4.7.RELEASE</td><td>2.1.3.RELEASE</td><td>2.1.4.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-netflix</td><td>1.4.7.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-security</td><td>1.2.4.RELEASE</td><td>2.1.3.RELEASE</td><td>2.1.4.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cloudfoundry</td><td>1.1.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-consul</td><td>1.3.6.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-sleuth</td><td>1.3.6.RELEASE</td><td>2.1.1.RELEASE</td><td>2.1.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-stream</td><td>Ditmars.SR5</td><td>Fishtown.SR3</td><td>Fishtown.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-zookeeper</td><td>1.2.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-boot</td><td>1.5.21.RELEASE</td><td>2.1.5.RELEASE</td><td>2.1.8.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-task</td><td>1.2.4.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-vault</td><td>1.1.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-gateway</td><td>1.0.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-openfeign</td><td></td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-function</td><td>1.0.2.RELEASE</td><td>2.0.2.RELEASE</td><td>2.0.3.BUILD-SNAPSHOT</td></tr></tbody></table><h3 id="SpringCloud-全家桶"><a href="#SpringCloud-全家桶" class="headerlink" title="SpringCloud 全家桶"></a><a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">SpringCloud 全家桶</a></h3><h4 id="spring-cloud-netflix"><a href="#spring-cloud-netflix" class="headerlink" title="spring-cloud-netflix"></a>spring-cloud-netflix</h4><h5 id="eureka-原理："><a href="#eureka-原理：" class="headerlink" title="eureka 原理："></a>eureka 原理：</h5><ul><li>服务启动时，调用 eureka 接口进行注册，Eureka Server 会存储这些信息，IP、端口、微服务名称等</li><li>微服务启动之后，会周期性的发送心跳进行“续租”，默认 30 秒</li><li>如果一定时间没有“续租”，默认 90 秒，就销毁微服务实例</li><li>默认情况下，Eureka Server 也是一个 Eureka Client，集群下会互相复制服务注册表中的信息进行同步</li><li>Eureka Client 会缓存注册表的信息，减少Eureka Server 的请求压力，以及容灾</li></ul><h4 id="spring-cloud-openfeign"><a href="#spring-cloud-openfeign" class="headerlink" title="spring-cloud-openfeign"></a>spring-cloud-openfeign</h4><h4 id="spring-cloud-zuul-微服务网关"><a href="#spring-cloud-zuul-微服务网关" class="headerlink" title="spring-cloud-zuul 微服务网关"></a>spring-cloud-zuul 微服务网关</h4><h4 id="spring-cloud-config-配置中心"><a href="#spring-cloud-config-配置中心" class="headerlink" title="spring-cloud-config 配置中心"></a>spring-cloud-config 配置中心</h4><h2 id="项目创建的目的？"><a href="#项目创建的目的？" class="headerlink" title="项目创建的目的？"></a>项目创建的目的？</h2><p>第一个目的是为了本人能够熟悉和学习 Spring-Cloud 相关知识，不过在做了一段时间之后还是希望能够分享出来让更多的同学一起学习和讨论。</p><h2 id="项目结构如何？"><a href="#项目结构如何？" class="headerlink" title="项目结构如何？"></a>项目结构如何？</h2><ul><li>scaffold-business <a href="#">业务服务提供者</a> 端口从8850 - 8860<ul><li>scaffold-business-sys-service <a href="#">系统业务微服务-业务模块</a> 端口 8850</li><li>scaffold-business-job-service <a href="#">定时任务微服务-业务模块</a> 端口 8851</li><li>scaffold-business-thirdparty-service <a href="#">第三方业务微服务-业务模块</a> 端口 8852</li></ul></li><li>scaffold-business-api <a href="#">业务API包 用于接口与实现分离</a><ul><li>scaffold-business-sys-api <a href="#">系统资源、菜单、权限等API封装</a></li><li>scaffold-business-job-api <a href="#">定时任务API封装</a></li><li>scaffold-business-thirdparty-api <a href="#">第三方服务API封装</a></li></ul></li><li>scaffold-core <a href="#">工具类以及各种公共代码</a><ul><li>scaffold-core-code <a href="#">每个模块都会用到的公共代码，Bean，config等</a></li><li>scaffold-core-common <a href="#">工具类模块，公共代码</a></li><li>scaffold-core-plugin <a href="#">自动代码生成插件模块</a></li></ul></li><li>scaffold-eureka <a href="#">注册中心Eureka</a> 端口 8761 - 8771</li><li>scaffold-zuul <a href="#">网关服务</a> 端口 8861 - 8870</li><li>scaffold-config-server <a href="#">配置服务端服务</a> 端口 8871 - 8881</li><li>scaffold-config-client <a href="#">配置客户端服务</a> 端口 8880 - 8891</li><li>scaffold-tx-manager <a href="#">分布式事务协调服务</a> 端口7970 </li><li>scaffold-feign <a href="#">Feign模块</a><ul><li>scaffold-feign-sys <a href="#">feign-sys模块</a></li><li>scaffold-feign-job <a href="#">feign-job模块</a></li><li>scaffold-feign-thirdparty <a href="#">feign-thirdparty模块</a></li></ul></li><li>scaffold-route <a href="#">主业务消费者</a> 端口从8750 - 8760<ul><li>scaffold-route-operate <a href="#">后台管理接口及页面</a> 端口 8750</li><li>scaffold-route-app <a href="#">APP客户端接口</a> 端口 8751</li></ul></li></ul><h2 id="如何快速开始？"><a href="#如何快速开始？" class="headerlink" title="如何快速开始？"></a>如何快速开始？</h2><h3 id="1-本地直接启动"><a href="#1-本地直接启动" class="headerlink" title="1. 本地直接启动"></a>1. 本地直接启动</h3><ul><li><p>下载/克隆项目到本地 </p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/Fatezhang/scaffold-cloud</span></span><br></pre></td></tr></table></figure></li><li><p>安装MySql数据库并启动</p></li><li>创建数据库scaffold_cloud_base 和 tx_manager</li><li>修改 scaffold-cloud 中微服务的数据库链接配置，本地运行只需要修改application-local.yml</li><li>安装redis服务并启动，修改scaffold-core-code配置文件中的配置，同样只需要修改local中的</li><li>安装Rocket MQ服务，同样修改配置</li><li>如果有需要，注册阿里OSS，并修改配置中的配置</li><li>启动EurekaApplication注册中心</li><li>启动TxlcnApplication分布式事务协调服务</li><li>启动SysServiceApplication，加载数据库字典等配置到缓存、提供后台管理微服务（权限、操作员、角色、国际化配置等）</li><li>启动RouteOperateApplication服务，默认端口为8750</li><li>访问<a href="http://localhost:8750/ßß" target="_blank" rel="noopener">http://localhost:8750/ßß</a></li><li>默认账号密码为admin/admin123</li></ul><h3 id="2-使用-docker-部署"><a href="#2-使用-docker-部署" class="headerlink" title="2. 使用 docker 部署"></a>2. 使用 docker 部署</h3><h4 id="docker-启动-Linux-或者-Mac-下使用如下脚本-Windows-环境自行按照脚本中的示例执行"><a href="#docker-启动-Linux-或者-Mac-下使用如下脚本-Windows-环境自行按照脚本中的示例执行" class="headerlink" title="docker 启动 : Linux 或者 Mac 下使用如下脚本, Windows 环境自行按照脚本中的示例执行"></a>docker 启动 : Linux 或者 Mac 下使用如下脚本, Windows 环境自行按照脚本中的示例执行</h4><h4 id="mvn-clean-package-docker-build-Pdocker"><a href="#mvn-clean-package-docker-build-Pdocker" class="headerlink" title="mvn clean package docker:build -Pdocker"></a><code>mvn clean package docker:build -Pdocker</code></h4><pre><code>1. 进入项目所在目录2. 执行 `./.scripts/recreate-docker-image.sh` 创建 docker 镜像3. 执行 `./.scripts/start-docker-service.sh` 即使用 docker-compose 启动</code></pre><h2 id="项目未来还需要做什么？"><a href="#项目未来还需要做什么？" class="headerlink" title="项目未来还需要做什么？"></a>项目未来还需要做什么？</h2><ul><li>更改项目注册发现中心，也许用 nacos 或者 zookeeper</li><li>加入更多 spring-cloud 周边服务，包括各种监控平台等</li><li>CI/CD 使用 Jenkins 或者 BuildKite</li><li>使用 docker 容器化部署</li><li>ElasticSearch 日志收集</li><li><a href="https://github.com/xuxueli/xxl-job" target="_blank" rel="noopener">xxl-job</a> 分布式定时任务 <a href="https://www.xuxueli.com/xxl-job/" target="_blank" rel="noopener">https://www.xuxueli.com/xxl-job/</a></li><li>整合<a href="https://github.com/justauth/JustAuth" target="_blank" rel="noopener">第三方开源库</a>用以登录、支付等</li><li>最后，实际开发一些业务功能</li></ul><hr><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><blockquote><p><a href="https://juejin.im/post/5c28f2fe51882565a15776fb" target="_blank" rel="noopener">https://juejin.im/post/5c28f2fe51882565a15776fb</a></p><p><a href="https://juejin.im/post/5de740566fb9a0165721b744" target="_blank" rel="noopener">https://juejin.im/post/5de740566fb9a0165721b744</a></p><p><a href="https://juejin.im/post/5dc220126fb9a04aa660dcfb" target="_blank" rel="noopener">https://juejin.im/post/5dc220126fb9a04aa660dcfb</a></p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;u style=&quot;font-size=16px;&quot;&gt;&lt;a href=&quot;/&quot;&gt;Scaffold-Cloud: SpringCloud微服务脚手架&lt;/a&gt;&lt;/u&gt;&lt;/center&gt; &lt;a href=&quot;https://mubu.com/doc/6NZlNw3DIw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;幕布&lt;/a&gt;&lt;br&gt;Scaffold-Cloud 是一个适用于开发者学习的 Spring-Cloud 微服务项目脚手架。项目期望集成大部分目前互联网公司使用的主流的Spring-Cloud微服务相关工具和服务。并结合一些实际的业务增加一些其他功能，如：分布式事务、定时任务、消息队列、日志分析等等，然后加入 CI/CD 并引入 docker 部署。&lt;/p&gt;
&lt;p&gt;Scaffold-Cloud 基于 SpringCloud Netflix 全家桶进行微服务项目的构建，所以在这之前，使用 Scaffold-Cloud 需要先了解下 SpringCloud 以及 Netflix 工具全家桶。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/20191025/SpringCloud微服务架构实践/netflix.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;u style=&quot;font-size=6px; color:gray&quot;&gt;Sorry, NetFlix is not available in your country yet.&lt;/u&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="http://zhangjiaheng.cn/categories/SpringCloud/"/>
    
    
      <category term="SpringBoot" scheme="http://zhangjiaheng.cn/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://zhangjiaheng.cn/tags/SpringCloud/"/>
    
      <category term="微服务" scheme="http://zhangjiaheng.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="http://zhangjiaheng.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>The Second Day on the Job in ThoughtWorks</title>
    <link href="http://zhangjiaheng.cn/blog/20191022/The-second-day-on-the-job-in-ThoughtWorks/"/>
    <id>http://zhangjiaheng.cn/blog/20191022/The-second-day-on-the-job-in-ThoughtWorks/</id>
    <published>2019-10-22T13:41:42.000Z</published>
    <updated>2022-11-29T14:56:28.797Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://zhangjiaheng.cn/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="程序人生" scheme="http://zhangjiaheng.cn/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>我项目中使用的分布式事务：LCN</title>
    <link href="http://zhangjiaheng.cn/blog/20191020/%E6%88%91%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%EF%BC%9ALCN/"/>
    <id>http://zhangjiaheng.cn/blog/20191020/我项目中使用的分布式事务：LCN/</id>
    <published>2019-10-20T04:14:44.000Z</published>
    <updated>2022-11-29T14:56:28.854Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/20191020/我项目中使用的分布式事务：LCN/tx.png" alt="官网首页"></p><center><a href="#more2">其他关于分布式事务的总结整理</a></center><a id="more"></a><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>由于公司项目是使用dubbo进行开发的分布式服务，所以项目中有很多涉及到分布式事务问题的场景。比如有两个模块：用户模块和账户资金模块。有一个场景是用户被邀请成为系统的新用户，需要先初始化用户信息，然后再去账户资金模块初始化用户账户信息。两个不同的模块为两个不同的RPC服务，分别被调用然后插入数据，这时候如果账户资金插入失败，不加入分布式事务的话用户直接初始化成功。我们希望这种情况下用户插入的信息被回滚，所以需要引入分布式事务来进行业务处理。</p><h4 id="使用的框架"><a href="#使用的框架" class="headerlink" title="使用的框架"></a>使用的框架</h4><p>经过调研，我们发现TX-LCN框架比较适合我们的业务场景，我们打算引入并使用LCN事务模式来进行服务中的分布式事务的业务处理。关于LCN、TCC、TXC几种事务模式的区别在<a href="#more2">下面</a>整理。</p><p>在<a href="https://www.txlcn.org/zh-cn/index.html" target="_blank" rel="noopener">官网</a>下载对应的服务，并引入项目或者单独启动：</p><p><img src="/blog/20191020/我项目中使用的分布式事务：LCN/tx.png" alt="官网首页"></p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.codingapi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transaction-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lcn.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.codingapi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tx-plugins-db<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lcn.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用：</p><p>在服务的发起方使用注解<code>@TxTransaction(isStart = true)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@TxTransaction</span>(isStart = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ExperienceLogVO <span class="title">doUseExperience</span><span class="params">(Long userId, Long experienceRecordId, ExperienceLogCreateModel createModel)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// ... do something  ...</span></span><br><span class="line">    userFacade.insert();</span><br><span class="line"> <span class="comment">// ... do something  ...</span></span><br><span class="line">    accountFacede.insert();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务的参与方使用注解<code>@TxTransaction</code>标识即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TxTransaction</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="comment">// ... do something  ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再启动项目之前，先启动tx-manager服务，作为协调者的角色存在，然后启动项目，调用接口的时候就可以使用分布式事务了。</p><p><a id="more2" class="active"></a></p><h4 id="其他关于分布式事务的总结整理"><a href="#其他关于分布式事务的总结整理" class="headerlink" title="其他关于分布式事务的总结整理"></a>其他关于分布式事务的总结整理</h4><h5 id="关于Tx-LCN-官网文档"><a href="#关于Tx-LCN-官网文档" class="headerlink" title="关于Tx-LCN - 官网文档"></a>关于Tx-LCN - <a href="https://www.txlcn.org/zh-cn/docs/preface.html" target="_blank" rel="noopener">官网文档</a></h5><p>Tx-LCN早期是为了设计出LCN分布式事务而命名的，不过在5.0之后可以支持LCN、TXC、TCC三种分布式事务模式。LCN框架定位为<code>不生产事务，只做事务的搬运工</code>。即TX-LCN是一款事务协调框架，本身并不操作事务，只是基于对事务的协调从而达到事务一致性的效果。</p><p>最新版本的TX-LCN同时支持多种事务模式。并支持多种不同的数据源同时使用分布式事务，完全达到拔插效果。以下是三种事务模式的介绍、区别及优缺点。</p><h6 id="LCN事务模式"><a href="#LCN事务模式" class="headerlink" title="LCN事务模式"></a>LCN事务模式</h6><ul><li>仅仅作为事务的协调者，本身不生产事务。原理是在事务发起方创建事务分组，并通过Http/Tcp协议调用的时候将事务分组传递到事务参与方。事务参与方的本地事务执行成功之后，根据事务分组ID通知事务的发起方提交所有事务。在全部事务成功通知之前，其各个本地事务均为假关闭，等待TxManager协调完成事务之后再关闭连接。</li><li>LCN事务对于代码几乎没有嵌入性，只需要添加注解即可实现分布式事务。</li><li>LCN的事务提交与回滚都有本地事务保障，更安全的确保数据一致性。</li><li>但是LCN仅限于存在本地事务并且可以通过连接对象控制事务模块的系统。</li><li>LCN模式依赖于连接代理服务，事务的发起方与参与方要一起连接与释放，较耗性能。</li><li><img src="/blog/20191020/我项目中使用的分布式事务：LCN/LCN1.png" alt="情况1"></li><li><img src="/blog/20191020/我项目中使用的分布式事务：LCN/LCN2.png" alt="情况1"></li><li><img src="/blog/20191020/我项目中使用的分布式事务：LCN/LCN3.png" alt="情况1"><h6 id="TCC事务模式"><a href="#TCC事务模式" class="headerlink" title="TCC事务模式"></a>TCC事务模式</h6></li><li>TCC事务模式不依赖于资源管理器对于XA的支持，而是通过业务系统提供的业务逻辑的调度来实现分布式事务。即编写三步操作：Try：尝试执行业务（先插入一条数据，状态为Try）、Confrim：确认执行业务（成功后状态改为Confrim）、Cancel：取消执行业务（需要回滚的话根据前两个步骤的id继续更改状态或者删除数据）。</li><li>TCC模式对于代码的侵入性很高，基本上一个接口需要拆分成3个，对于程序员的编码要求很高，业务的正确性、数据一致性都由开发者来保证</li><li>优点是TCC模式对于有无本地事务的场景都适用，甚至可以跨数据源，针对MySQL、redis、Mongo等整合成一个大的事务<h6 id="TXC事务模式"><a href="#TXC事务模式" class="headerlink" title="TXC事务模式"></a>TXC事务模式</h6></li><li>其来源于阿里巴巴的一个分布式事务中间件，可以通过极少量的代码侵入，实现分布式事务。原理是在执行SQL之前，先查询SQL的影响数据，然后保存执行的SQL快照信息并创建锁。当需要回滚的时候就采用这些记录回滚数据库。目前实现锁使用的是redis分布式锁控制。</li><li>TXC事务模式同样对代码的侵入性低</li><li>该模式仅限于对支持SQL方式的模块支持</li><li>该模式由于每次执行SQL之前需要先查询影响数据，因此相比LCN模式更消耗性能</li><li>TXC事务模式不会占用数据库资源</li><li>关于TXC事务的详细介绍可以查看<a href="https://blog.csdn.net/m0_38110132/article/details/77043580" target="_blank" rel="noopener">这篇博客</a></li></ul><h5 id="CAP理论和BASE理论"><a href="#CAP理论和BASE理论" class="headerlink" title="CAP理论和BASE理论"></a>CAP理论和BASE理论</h5><h6 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h6><p>CAP理论即数据一致性、服务可用性和分区容错性的简称。</p><ul><li>Consistency 数据一致性：一次完整的更新操作，所有节点在同一时刻访问到的数据是一致的</li><li>Availability 服务可用性：服务一直可用，并且是正常响应时间</li><li>Partition tolerance 分区容错性：分布式多节点在某几个节点挂掉后仍然可以对外提供正常的服务</li></ul><p>事实上，CAP这三种并无法保证完全满足，一般只能满足其二。对于分布式系统来说，分区容错性是最基本需要满足的条件，否则不能称为分布式系统，只满足CA 其实是传统的单机服务。那么在满足P（分区容错）的时候，就需要在C和A之间权衡。事实上，分布式系统下一般会保证A（服务可用）P，放弃数据的强一致性，只保证数据的最终一致性。这样就衍生出了BASE理论。</p><h6 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h6><p>BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于CAP定理逐步演化而来的。BASE理论的核心思想是：<strong>即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性</strong>。</p><ul><li>基本可用：在分布式系统中，允许在出现不可预知故障的情况下损失部分可用性（并不是允许系统不可用），允许响应时间上的确实和部分系统功能的错误（并发场景下拒绝服务产生报错等）</li><li>软状态：即允许数据存在中间状态，允许不同节点的数据之间存在时间上的数据差异</li><li>最终一致性：强调所有数据副本能够最终一致，不需要保证数据实时强一致。</li></ul><p>传统事务的ACID机制追求强一致性，而BASE理论为分布式系统而生，主张牺牲强一致性，使得服务达到高可用。不过在分布式系统中，不同场景下对于数据的一致性又是不同的，所以才会有分布式事务来保证数据的一致，即ACID与BASE理论结合使用。</p><h5 id="2PC和3PC"><a href="#2PC和3PC" class="headerlink" title="2PC和3PC"></a>2PC和3PC</h5><h6 id="2PC-二段式提交"><a href="#2PC-二段式提交" class="headerlink" title="2PC - 二段式提交"></a>2PC - 二段式提交</h6><p>2PC，是Two-Phase Commit的缩写。过程如下：</p><ul><li><p>阶段一：提交事务请求</p><ul><li>协调者询问参与方是否可以执行提交操作并等待响应</li><li>参与者执行询问为止的所有事务操作</li><li>参与者响应协调者，返回事务执行成功与否</li></ul></li><li><p>阶段二：执行事务提交</p><ul><li><p>协调者收到所有第一阶段响应之后发起正式提交请求</p></li><li><p>参与者正式完成操作并释放整个事务期间占用的资源</p></li><li><p>反馈事务提交结果</p></li><li><p>协调者收到所有完成的消息后，完成事务。</p></li><li><p>如果任意参与者在第一阶段返回执行失败或者超时的消息，中断事务</p></li><li><p>参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源。</p></li><li><p>参与者节点向协调者节点发送”回滚完成”消息。</p></li><li><p>协调者节点受到所有参与者节点反馈的”回滚完成”消息后，取消事务。</p></li><li><p>不管最后结果如何，第二阶段都会结束当前事务</p></li></ul></li></ul><p>  <strong>2PC的缺点：</strong> 执行过程中所有节点都是同步阻塞的；如果协调者是单点并且发生故障，参与者将一直阻塞；如果在第二阶段协调者正式向所有参与者发送正式提交事务的请求，其中部分因为网络问题没有收到，另一部分却已经提交无法回滚，出现数据不一致的情况；协调者再发出commit消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。</p><p>  由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。</p><h6 id="3PC-三段式提交"><a href="#3PC-三段式提交" class="headerlink" title="3PC - 三段式提交"></a>3PC - 三段式提交</h6><p>3PC将2PC的准备阶段又划分为两次准备，这样三阶段提交就有CanCommit、PreCommit、DoCommit三个阶段。。并且在协调者与参与者中都引入超时机制。</p><ul><li><p>CanCommit阶段</p><ul><li>同2PC的准备阶段，协调者向参与者发送事务提交请求，询问并等待响应</li><li>得到响应之后进入预备提交阶段</li></ul></li><li><p>PreCommit阶段</p><ul><li>所有参与者第一阶段都返回成功状态，那么就会开始事务的预执行</li><li>进入PreCommit并执行事务操作，全部成功就返回给提交者</li><li>假如有任何一个参与者向协调者发送了No响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。发送中断请求协调者向所有参与者发送abort请求;中断事务参与者收到来自协调者的abort请求之后（或超时之后，仍未收到协调者的请求），执行事务的中断。</li></ul></li><li><p>doCommit阶段</p><ul><li><p>发送提交请求协调接收到参与者发送的ACK响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送doCommit请求。</p></li><li><p>事务提交参与者接收到doCommit请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。</p></li><li><p>响应反馈事务提交完之后，向协调者发送Ack响应。</p></li><li><p>完成事务协调者接收到所有参与者的ack响应之后，完成事务。</p></li></ul></li></ul><p>  中断事务协调者没有接收到参与者发送的ACK响应（可能是接受者发送的不是ACK响应，也可能响应超时），那么就会执行中断事务。</p><ul><li><p>发送中断请求协调者向所有参与者发送abort请求</p></li><li><p>事务回滚参与者接收到abort请求之后，利用其在阶段二记录的undo信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。</p></li><li><p>反馈结果参与者完成事务回滚之后，向协调者发送ACK消息</p></li><li><p>中断事务协调者接收到参与者反馈的ACK消息之后，执行事务的中断。</p></li></ul><p>  相比于2PC，3PC最关键要解决的就是协调者和参与者同时挂掉的问题，所以3PC把2PC的准备阶段再次一分为二。在第一阶段只是询问所有参与者是否都可以执行事务操作，并不在本阶段执行事务操作。当协调者收到所有的参与者都返回YES时，在第二阶段才执行事务操作，然后在第三阶段在执行commit或者rollback。</p><p>  <strong>3PC存在的问题：</strong> 在doCommit阶段，如果参与者无法及时接收到来自协调者的doCommit或者abort请求时，会在等待超时之后，会继续进行事务的提交。这样与其他执行回滚的参与者就会出现数据不一致的情况。</p><hr><blockquote><p>参考：</p><ul><li><p><a href="https://www.hollischuang.com/archives/1580" target="_blank" rel="noopener">https://www.hollischuang.com/archives/1580</a></p></li><li><p><a href="http://anruence.com/2018/03/05/tcc-2pc-3pc/" target="_blank" rel="noopener">http://anruence.com/2018/03/05/tcc-2pc-3pc/</a></p></li><li><p><a href="http://blog.jobbole.com/95632/" target="_blank" rel="noopener">http://blog.jobbole.com/95632/</a></p></li><li><a href="http://blog.csdn.net/zhangjq520/article/details/78433686" target="_blank" rel="noopener">http://blog.csdn.net/zhangjq520/article/details/78433686</a></li><li><a href="https://www.zhihu.com/question/48627764/answer/111983553" target="_blank" rel="noopener">https://www.zhihu.com/question/48627764/answer/111983553</a></li><li><a href="https://www.jianshu.com/p/d3eda795188a" target="_blank" rel="noopener">https://www.jianshu.com/p/d3eda795188a</a></li></ul></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/20191020/我项目中使用的分布式事务：LCN/tx.png&quot; alt=&quot;官网首页&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;a href=&quot;#more2&quot;&gt;其他关于分布式事务的总结整理&lt;/a&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://zhangjiaheng.cn/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="分布式事务" scheme="http://zhangjiaheng.cn/categories/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://zhangjiaheng.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="分布式" scheme="http://zhangjiaheng.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="数据库" scheme="http://zhangjiaheng.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="分布式事务" scheme="http://zhangjiaheng.cn/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>其实我不太想离开这里</title>
    <link href="http://zhangjiaheng.cn/blog/20190909/%E5%85%B6%E5%AE%9E%E6%88%91%E4%B8%8D%E6%83%B3%E7%A6%BB%E5%BC%80%E8%BF%99%E9%87%8C/"/>
    <id>http://zhangjiaheng.cn/blog/20190909/其实我不想离开这里/</id>
    <published>2019-09-09T15:01:04.000Z</published>
    <updated>2022-11-29T14:56:28.820Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://zhangjiaheng.cn/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="随笔" scheme="http://zhangjiaheng.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>并发编程学习(七)：Fork/Join框架原理及demo</title>
    <link href="http://zhangjiaheng.cn/blog/20190814/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E4%B8%83-%EF%BC%9AFork-Join%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86%E5%8F%8Ademo/"/>
    <id>http://zhangjiaheng.cn/blog/20190814/并发编程学习-七-：Fork-Join框架原理及demo/</id>
    <published>2019-08-14T09:48:56.000Z</published>
    <updated>2022-11-29T14:56:28.842Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/20190814/并发编程学习-七-：Fork-Join框架原理及demo/fm.jpg" alt="fm.jpg"></p><a id="more"></a><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Fork/Join框架是jdk1.7引入的一个基于“分治”思想的多线程框架。它的功能是将一个大任务切分(<strong>fork</strong>)成多个相同逻辑的小任务，分而治之，当子任务全都执行完成之后，将结果合并(<strong>join</strong>)起来，最终成为整体任务的执行结果。原理可以抽象成下图表示：</p><p><img src="/blog/20190814/并发编程学习-七-：Fork-Join框架原理及demo/fj.png" alt="Fork/Join"></p><h3 id="Fork-Join相关代码原理及思想"><a href="#Fork-Join相关代码原理及思想" class="headerlink" title="Fork/Join相关代码原理及思想"></a>Fork/Join相关代码原理及思想</h3><h6 id="Fork-Join执行步骤"><a href="#Fork-Join执行步骤" class="headerlink" title="Fork/Join执行步骤"></a>Fork/Join执行步骤</h6><ol><li><p>进行任务分割：将任务分割成小任务，然后这个小任务有可能还需要继续分割，直到足够小。</p></li><li><p>执行并合并结果：分割的子任务分别放在双端队列里，然后几个启动线程分别从双端队列里获取任务执行。子任务执行完的结果都统一放在一个队列里，启动一个线程从队列里拿数据，然后合并这些数据。</p></li></ol><p>Fork/Join使用两个类完成以上步骤：</p><ul><li><strong>ForkJoinTask</strong>：<ul><li>Fork/Join提供了两个子类：RecursiveAction：用于没有返回结果的任务；RecursiveTask ：用于有返回结果的任务</li></ul></li><li><strong>ForkJoinPool</strong> ：<code>public class ForkJoinPool extends AbstractExecutorService{ ... }</code>ForkJoinTask需要通过ForkJoinPool来执行，任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。这种算法成为<strong>工作窃取算法(work-stealing)</strong></li></ul><h6 id="工作窃取算法-work-stealing"><a href="#工作窃取算法-work-stealing" class="headerlink" title="工作窃取算法(work-stealing)"></a>工作窃取算法(work-stealing)</h6><ul><li><p>Fork/Join框架内部实现了一个类似于LinkedBlockingDeque的双端队列用作工作线程的任务队列<strong>WorkQueue</strong>。使用<code>ForkJoinWorkerThread</code>保存工作线程，<code>ForkJoinPool.WorkQueue</code>就在其内部。</p></li><li><p>Fork/Join每个工作线程在运行中产生了新的任务(通常是调用fork方法)的时候，将任务加入WorkQueue尾部，并且工作线程每次取出任务执行也是从队尾取出执行，即LIFO</p></li><li><p>每个工作线程在处理自己的工作队列同时，会尝试窃取一个任务（或是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的工作队列），窃取的任务位于其他线程的工作队列的队首，也就是说工作线程在窃取其他工作线程的任务时，使用的是 FIFO 方式。</p></li><li><p>在遇到 join() 时，如果需要 join 的任务尚未完成，则会先处理其他任务，并等待其完成。</p></li><li><p>在既没有自己的任务，也没有可以窃取的任务时，进入休眠。</p></li></ul><h3 id="Fork-Join-demo演示"><a href="#Fork-Join-demo演示" class="headerlink" title="Fork/Join demo演示"></a>Fork/Join demo演示</h3><blockquote><p>使用Fork/Join完成大量有序数字的加和</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculateTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREADSHOLD = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyCalculateTask</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.start = start;</span><br><span class="line">    <span class="keyword">this</span>.end = end;</span><br><span class="line">    <span class="keyword">this</span>.list = list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (end - start &lt; THREADSHOLD) &#123;</span><br><span class="line">      <span class="comment">// 当两数字之间差值小于指定值 就不再查分成小任务 </span></span><br><span class="line">      String so = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        so += list.get(i) + <span class="string">","</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">"处理 "</span> + so + <span class="string">" 的数据"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">      <span class="comment">// 一分为二 拆分任务</span></span><br><span class="line">      <span class="keyword">final</span> MyCalculateTask left = <span class="keyword">new</span> MyCalculateTask(start, mid, list);</span><br><span class="line">      <span class="keyword">final</span> MyCalculateTask right = <span class="keyword">new</span> MyCalculateTask(mid, end, list);</span><br><span class="line">      left.fork();</span><br><span class="line">      right.fork();</span><br><span class="line">      sum += left.join();</span><br><span class="line">      sum += right.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">400</span>;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">      list.add(<span class="string">"i-"</span> + i);</span><br><span class="line">      sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    MyCalculateTask task = <span class="keyword">new</span> MyCalculateTask(<span class="number">0</span>, count, list);</span><br><span class="line">    <span class="keyword">final</span> ForkJoinTask&lt;Integer&gt; submit = pool.submit(task);</span><br><span class="line">    System.out.println(<span class="string">"sum = "</span> + sum + <span class="string">" --- submit.get() = "</span> + submit.get());</span><br><span class="line">    pool.awaitTermination(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    pool.shutdown();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Fork/Join框架可以帮助我们完成很多这种大任务可以拆分成小任务执行的场景，不过上面的方法并不是最佳执行调用方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left.fork();  </span><br><span class="line">right.fork();</span><br><span class="line">替换为</span><br><span class="line">invokeAll(left, right);</span><br></pre></td></tr></table></figure><p>因为对于Fork/Join模式，假如Pool里面线程数量是固定的，那么调用子任务的fork方法相当于A先分工给B，然后A当监工不干活，B去完成A交代的任务。所以上面的模式相当于浪费了一个线程。那么如果使用invokeAll相当于A分工给B后，A和B都去完成工作。这样可以更好的利用线程池，缩短执行的时间。</p><blockquote><p>参考：<a href="http://ifeve.com/talk-concurrency-forkjoin/" target="_blank" rel="noopener">http://ifeve.com/talk-concurrency-forkjoin/</a></p></blockquote><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/20190814/并发编程学习-七-：Fork-Join框架原理及demo/fm.jpg&quot; alt=&quot;fm.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="并发编程" scheme="http://zhangjiaheng.cn/categories/Java%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="并发编程" scheme="http://zhangjiaheng.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Fork/Join框架" scheme="http://zhangjiaheng.cn/tags/Fork-Join%E6%A1%86%E6%9E%B6/"/>
    
      <category term="ForkJoinPool" scheme="http://zhangjiaheng.cn/tags/ForkJoinPool/"/>
    
      <category term="线程池" scheme="http://zhangjiaheng.cn/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式】设计模式基本思想以及23种模式总结整理</title>
    <link href="http://zhangjiaheng.cn/blog/20190812/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3%E4%BB%A5%E5%8F%8A23%E7%A7%8D%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E6%95%B4%E7%90%86/"/>
    <id>http://zhangjiaheng.cn/blog/20190812/【设计模式】设计模式基本思想以及23种模式总结整理/</id>
    <published>2019-08-12T04:47:54.000Z</published>
    <updated>2022-11-29T14:56:28.805Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/20190812/【设计模式】设计模式基本思想以及23种模式总结整理/bz.png" alt="封面"></p><a id="more"></a><h3 id="设计模式主要思想"><a href="#设计模式主要思想" class="headerlink" title="设计模式主要思想"></a>设计模式主要思想</h3><p>设计模式是在长期应用开发过程中，众多开发者总结归纳出来的程序架构与设计思想。是经过实践证明的，可在实际背景下使用的一系列程序设计方案。设计模式产生的根本目的就是为了解决开发过程中重复的代码编写，以及让程序更易扩展复用。</p><h4 id="设计模式的原则"><a href="#设计模式的原则" class="headerlink" title="设计模式的原则"></a>设计模式的原则</h4><ul><li>单一职责：每个类都应该实现单一的功能，否则应该将类进行拆分</li><li>里氏替换：即继承复用/合成复用。尽量使用合成/聚合的方式而不是继承。任何父类出现的地方，子类都可以出现。派生类可以在基类的基础上扩展自己的功能实现。是对“开闭原则”的一个补充。在里氏替换原则中，尽量不要对父类进行重载或者重写，因为父类代表一个定义好的结构，通过规范好的接口与外界进行交互，子类不应该随意破坏它，而是对其进行扩展。</li><li>依赖倒置：“开闭原则”的基础。即面向接口编程。依赖于抽象而不是依赖于具体的实现，编程时遇到具体的类时，不与具体的类交互，而与抽象接口进行交互。便于增加新的具体类的时候代码可以复用。</li><li>接口隔离：每个接口不应该存在子类用不到却必须实现的方法，否则就应该将接口拆分，将职责单一化。</li><li>最少知道：即迪米特法则。一个类对于自己依赖的类知道的越少越好，无论被依赖的类多么复杂，都应该将逻辑封装在方法内部，通过一个共有的方法提供给依赖类使用，这样当被依赖类发生改变的时候，才会尽可能少的影响依赖类。</li></ul><h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h3><blockquote><p>点击对应链接跳转到该设计模式的详细整理与代码示例</p></blockquote><table><thead><tr><th>范围</th><th>创建型模式</th><th>结构型模式</th><th>行为型模式</th></tr></thead><tbody><tr><td>对象创建</td><td><a href="http://zhangjiaheng.cn/blog/20190607/%E6%B7%B1%E5%BA%A6%E5%88%86%E6%9E%90%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B/">Singleton（单例模式）</a><br>Prototype(原型模式)<br>Factory Method（工厂方法模式）<br>Abstract Factory（抽象工厂模式）<br>Builder（建造者模式）</td><td></td><td></td></tr><tr><td>接口适配</td><td></td><td>Adapter（适配器模式）<br>Bridge（桥接模式）<br>Facade（外观模式）</td><td></td></tr><tr><td>对象解耦</td><td></td><td></td><td>Mediator（中介者模式）<br>Observer（观察者模式）</td></tr><tr><td>抽象集合</td><td></td><td>Composite（组合模式）</td><td>Iterator（迭代器模式）</td></tr><tr><td>行为扩展</td><td></td><td>Decorator（装饰模式）</td><td>Visitor（访问者模式）<br>Chain of Responsibility（职责链）</td></tr><tr><td>算法封装</td><td></td><td></td><td><a href="http://zhangjiaheng.cn/blog/20190707/%E3%80%90%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">Template（模板方法模式）</a><br>Strategy（策略模式）</td></tr><tr><td>性能与对象访问</td><td></td><td>Flyweight（享元模式）<br>Proxy（代理模式）</td><td></td></tr><tr><td>对象状态</td><td></td><td></td><td>Memento（备忘录模式）<br>State（状态模式）</td></tr><tr><td>其他</td><td></td><td></td><td>Interpreter（解释器模式）</td></tr></tbody></table><h4 id="总结下设计模式的归类"><a href="#总结下设计模式的归类" class="headerlink" title="总结下设计模式的归类"></a>总结下设计模式的归类</h4><p><img src="/blog/20190812/【设计模式】设计模式基本思想以及23种模式总结整理/sjmo.png" alt="设计模式分类 - 幕布"></p><h4 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h4><p>创建型设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，使调用者无需new对象，在程序中针对给定业务场景去调用特定的对象创建方法，使程序更加灵活。</p><h4 id="行为型设计模式"><a href="#行为型设计模式" class="headerlink" title="行为型设计模式"></a>行为型设计模式</h4><p>行为型设计模式主要关注对象之间的通信。</p><h4 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h4><p>结构型设计模式关注类和对象的组合，继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/20190812/【设计模式】设计模式基本思想以及23种模式总结整理/bz.png&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="设计模式" scheme="http://zhangjiaheng.cn/categories/Java%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java基础" scheme="http://zhangjiaheng.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="设计模式" scheme="http://zhangjiaheng.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式基本思想" scheme="http://zhangjiaheng.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
</feed>
